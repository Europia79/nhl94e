
2 registers control palette. These are $2121 and $2122.

| w   |$2121   |Color # (or palette) selection register [CGDATA]
|     |        |xxxxxxxx             x: address (color #).
|     |        |
|     |        |
| wd  |$2122   |Color data register [CGDATA]
|     |        |xxxxxxxx             x: Value of color. 
|     |        |
|     |        |SNES color is 15 bit; 5 bits for red, green, and blue. The order isn't RGB though: it's BGR (RGB reversed!).

Format of the 2 bytes you need to write to $2122 

?bbbbbgg gggrrrrr

b: blue
g: green
r: red
?: "The infamous bit-of-confusion." (just leave it 0 ;)


Setting palette is a matter of setting $2122.

Look for "22 21" in code
There are a lot of results

Most likely opcode STA

8D 22 21

4 instances of that:

file offset FF4DF	9FF4DF
file offset FF4E2	9FF4E2
file offset FF9FA	9FF9FA
file offset FF9FE	9FF9FE
None of these.

Do controlled corrupt
Controlled corrupt of all xx22 21 doesn't help.

Try VRAM instead

Goes from 0 to FFFF

5C0-700 - no

60E - Clock timer graphic

A00-B50 - top part of ice rink
B50-C00 - middle part of ice rink

2D00-3000- grandstands

F6xx - no
F7xx - no
F8xx - no
F9xx - no
FAxx - no
anything later - no

Player sprites are 0x7840-0x8560 in VRAM.
Look for the same pattern in RAM- doesn't appear

8D 22 21	sta $2122
8E 22 21 	stx $2122
8C 22 21 	sty $2122
9C 22 21	stz $2122
stz $2122

Can use No$sns to look at palette data
Palettes are stored in VRAM

Could try stepping through things until you see a change in No$sns

Got log of the palette change

Random bp on splash screen confirm-

$80/8587	FD 64 07	CMP A,[0764]
$80/858A	F0 FB		BEQ $8587

On stepping out..

//void SplashScreenIter()
ForEachFrame:
$9F/9708	22 83 85 80	JSR $80/8583	; Draws and advances the next frame
$9F/970C	AD D3 0A	MOV A,[0AD3]
$9F/970F	D0 F7		BNE $9708
DoneSplashScreen:
$9F/9711	6B		RTS		; Done with splash screen

////////////////////////////////////////////////

$80/$86B2	22 F7 96 9F	JSR $9F96F7	; Call SplashScreenIter()
$80/$86B6	22 84 86 80	JSR $808684
$80/$86BA	4C D5 86	JMP $86D5	; goto AfterSplashScreenIter

...

AfterSplashScreenIter:
$80/86D5	48		PHA

$9D/B120	A9 00 60	MOV 6000	; Still no palette change. 
						; It happens once you step out of here though.
						
					
					
Conclusion: pallete change happens not by setting 2122 directly but through DMA xfer.						
						
This is what does it
// Common code to update palette
$80/8736	8D 15 43	STA $4315	; A=0x200

$80/8739	A9 00 22	LDA #2200	;
$80/873C	8D 10 43	STA $4310	; Sets DMA register "Parameters for DMA Transfer" for channel 1
						; 0010 0010
						; 

$80/873F	A5 0C		LDA $0C		; Loads 0
$80/8741	8D 12 43	STA $4312	; Sets DMA register "A Address (low byte)" for channel 1

$80/8744	A6 0E		LDX $0E		; Loads 7F
$80/8746	8E 14 43	STX $4314	; Sets DMA register "A Address bank" for channel 1

$80/8749	A2 02		LDX #02
$80/874B	8E 0B 42	STX $420B	; Does the palette change
						; This is DMA-channel enable.
						; Setting "2" enables 1 channel
						

DMA[1]: CPU->PPU Mode:0 0x7F0000->0x2122 Bytes:200 (inc) V:128 CGRAM: 00 (0)

This DMA transfer is not used to assign pallettes always in the game, but it is used for assigning pallettes for players.

The beginning of the game assigns palletes not through DMA transfer. It does it directly. E.g.,
						
$9F/F4DF 8D 22 21    STA $2122  [$80:2122]   A:00FF X:2100 Y:0017 P:eNvMxdizc	; Write pallete data to CGRAM
$9F/F4E2 8D 22 21    STA $2122  [$80:2122]   A:00FF X:2100 Y:0017 P:eNvMxdizc
$9F/F4E5 C2 20       REP #$20                A:00FF X:2100 Y:0017 P:eNvMxdizc
$9F/F4E7 A9 1C EE    LDA #$EE1C              A:00FF X:2100 Y:0017 P:eNvmxdizc

As for $80/2122, it falls into
Bank $00-$3F offset $2100-$21FF contains "PPU1, APU, hardware registers" with no ROM mapping.
It's also shadowed at $80-$BF.

Try adjusting what's in RAM to change the color info

Entering-gameplay DMA xfer to CGRAM
DMA[1]: CPU->PPU Mode:0 0x7E35F4->0x2122 Bytes:100 (inc) V:210 CGRAM: 00 (0)

Data copied:

First half. Things to do with the rink
98 7F BD 7F BA 7F 7B 6F 00 00 D6 5A AD 35 29 25
DB 5A 5F 4A 3B 35 4D 6E DB 12 D2 7E 84 10 72 7F
98 7F 7B 6F 52 4A 29 25 84 10 5B 02 B6 01 00 00
84 48 00 34 24 01 80 00 36 01 0D 00 B6 35 2D 11
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
00 40 BD 77 1A 00 94 52 BD 77 BD 77 D3 15 49 5A
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
73 4E 73 4E BD 77 84 10 4A 29 4A 29 D3 15 49 5A
98 7F 60 03 7B 03 1B 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
33 67 29 25 D6 5A 29 25 F7 5E 54 21 99 0A 2D 76
BF 36 32 25 39 32 31 6F 70 36 D6 31 12 42 D7 41
EC 03 18 63 73 4E 29 25 73 4E F5 11 55 1E 29 25
6B 3D 29 35 67 11 93 62 36 1D 52 29 FC 1D 17 36
98 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

Second half. Seemingly does nothing
98 7F BD 7F BA 7F 7B 6F 00 00 D6 5A AD 35 29 25
DB 5A 5F 4A 3B 35 4D 6E DB 12 D2 7E 84 10 72 7F
98 7F 7B 6F 52 4A 29 25 84 10 5B 02 B6 01 00 00
84 48 00 34 24 01 80 00 36 01 0D 00 B6 35 2D 11
F2 7F 84 10 00 00 7B 6F 0D 00 12 00 5B 4A B6 35
52 4A 7B 6F 9B 00 C0 22 5F 0D 14 08 FF 17 6F 7E
98 7F 60 03 60 27 60 37 60 4B 60 5B 60 6F 60 7F
E0 03 E0 13 E0 27 E0 37 E0 4B E0 5B E0 6F E0 7F
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
00 40 BD 77 1A 00 94 52 BD 77 BD 77 D3 15 49 5A
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
73 4E 73 4E BD 77 84 10 4A 29 4A 29 D3 15 49 5A
EC 03 18 63 73 4E 29 25 73 4E F5 11 55 1E 29 25
6B 3D 29 35 67 11 93 62 36 1D 52 29 FC 1D 17 36
98 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
9F 02 9F 02 9F 02 9F 02 9F 02 9F 02 9F 02 9F 02

What is likely here is that the transfer we need happens before the matchup screen.

Xfer when you switch home teams on the game setup screen:

DMA[0]: CPU->PPU Mode:0 0x7F7500->0x2122 Bytes:200 (inc) V:227 CGRAM: 00 (0)

7F75E0-7F75FF keep changing every time you change teams and we know this is part of the range that gets DMA xfered. Also
7F7660-7F767F same thing.

What writes to these ranges?

One write is from

// void CopyPaletteDataToBuffer()
// Preconditions: 
//	X is 0x10
//	$09-$0C stores an address (e.g., $9AF3FE)

$9D/E0BD 86 16       STX $16    [$00:0016]   A:0000 X:00E2 Y:0002 P:envmxdizc	; Init loop counter
$9D/E0BF 98          TYA                     A:0000 X:00E2 Y:0002 P:envmxdizc
$9D/E0C0 0A          ASL A                   A:0000 X:00E2 Y:0002 P:envmxdizc
$9D/E0C1 AA          TAX                     A:0000 X:00E2 Y:0002 P:envmxdizc
$9D/E0C2 A0 00 00    LDY #$0000              A:0000 X:00E2 Y:0002 P:envmxdizc

Iterate16:									; This loop iterates 16 times
$9D/E0C5 B7 0C       LDA [$0C],y[$9A:F3FE]   A:0000 X:00E2 Y:0002 P:envmxdizc
$9D/E0C7 9F 00 75 7F STA $7F7500,x[$7F:75E2] A:6F7B X:00E2 Y:0002 P:envmxdizc	; Write palette data to a range that will be 
										; DMA'd to CGRAM
										; X starts at E0
$9D/E0CB C8          INY                     A:6F7B X:00E2 Y:0002 P:envmxdizc
$9D/E0CC C8          INY                     A:6F7B X:00E2 Y:0003 P:envmxdizc
$9D/E0CD E8          INX                     A:6F7B X:00E2 Y:0004 P:envmxdizc
$9D/E0CE E8          INX                     A:6F7B X:00E3 Y:0004 P:envmxdizc
$9D/E0CF C6 16       DEC $16    [$00:0016]   A:6F7B X:00E4 Y:0004 P:envmxdizc
$9D/E0D1 D0 F2       BNE $F2    [$E0C5]      A:6F7B X:00E4 Y:0004 P:envmxdizc	; loop using Iterate16

//////////////////////////////////////////////
// This code is run twice every so often.
// Once per home team, once per away team.


Value of X depends on team. It's team index * 4
Anaheim 	- 0x0
Boston		- 0x4
Buffalo 	- 0x8
Calgary		- 0xC
Chicago		- 0x10
Dallas		- 0x14
Detroit		- 0x18
Edmonton	- 0x1C
Florida		- 0x20
Hartford	- 0x24
LA		- 0x28
Montreal	- 0x2C
...
$9F/BE70 BF 11 85 9C LDA $9C8511,x[$9C:8539] A:0028 X:0028 Y:0060 P:envmxdizc

// Load an element from this table
7C F1 9A 00 5C EF 9A 00 9C F1 9A 00 7C F5 9A 00
3C F5 9A 00 FC F4 9A 00 5C F5 9A 00 DC F4 9A 00
BC F4 9A 00 9C F4 9A 00 5C F4 9A 00 3C F4 9A 00
1C F4 9A 00 FC F3 9A 00 DC F3 9A 00 BC F3 9A 00
9C F3 9A 00 7C F3 9A 00 5C F3 9A 00 1C F3 9A 00
DC F2 9A 00 BC F2 9A 00 9C F2 9A 00 5C F2 9A 00
1C F2 9A 00 FC F1 9A 00 3C F2 9A 00 1C F5 9A 00

Formatted nicely, it's
int teamColorArray[] =
{
	9AF17C // Anaheim	X=0
	9AEF5C // Boston	X=4
	9AF19C // Buffalo	X=8
	9AF57C // Calgary	X=C	
	9AF53C // Chicago 	X=10
	9AF4FC // Dallas 	X=14	
	9AF55C // Detroit 	X=18
	9AF4DC // Edmonton	X=1C		
	9AF4BC // Florida 	X=20
	9AF49C // Hartford	X=24	
	9AF45C // LA Kings 	X=28
	9AF43C // Montreal	X=2C
	9AF41C // New Jersey   	X=30	
	9AF3FC // NY Islanders 	X=34
	9AF3DC // NY Rangers	X=38
	9AF3BC // Ottawa	X=3C
	9AF39C // Philly	X=40	
	9AF37C // Pittsburgh	X=44
	9AF35C // Quebec	X=48
	9AF31C // San Jose	X=4C	
	9AF2DC // St Louis 	X=50	
	9AF2BC // Tampa Bay	X=54
	9AF29C // Toronto	X=48
	9AF25C // Vancouver	X=5C	
	9AF21C // Washington	X=60
	9AF1FC // Winnepeg	X=64
	9AF23C // All Stars East X=68
	9AF51C // All Stars West X=6C
};

$9F/BE74 85 0E       STA $0E    [$00:000E]   A:009A X:0028 Y:0060 P:envmxdizc	; Store the upper bytes
$9F/BE76 BF 0F 85 9C LDA $9C850F,x[$9C:8537] A:009A X:0028 Y:0060 P:envmxdizc	; Load the lower bytes
$9F/BE7A 85 0C       STA $0C    [$00:000C]   A:F45C X:0028 Y:0060 P:eNvmxdizc	; Store them into $0C-$0E
$9F/BE7C A2 10 00    LDX #$0010              A:F45C X:0028 Y:0060 P:eNvmxdizc	; Init a counter
$9F/BE7F 22 BD E0 9D JSL $9DE0BD[$9D:E0BD]   A:F45C X:0010 Y:0060 P:envmxdizc	; call CopyPaletteDataToBuffer()
$9F/BE83 AD 98 1C    LDA $1C98  [$9F:1C98]   A:831A X:00E0 Y:0020 P:envmxdiZc
$9F/BE86 CD 9A 1C    CMP $1C9A  [$9F:1C9A]   A:0010 X:00E0 Y:0020 P:envmxdizc
$9F/BE89 D0 13       BNE $13    [$BE9E]      A:0010 X:00E0 Y:0020 P:envmxdizC
$9F/BE9E A0 00 00    LDY #$0000              A:0010 X:00E0 Y:0020 P:envmxdizC
$9F/BEA1 A9 9A 00    LDA #$009A              A:0010 X:00E0 Y:0000 P:envmxdiZC
...

Each element in teamColorArray points to a 32-byte (0x20) set of color data.
                                                                           
Hartford (9AF49C): 	
		00 00 7B 6F 00 01 40 01 80 01 E0 81 20 82 60 02		
		00 65 E0 58 C0 CC A0 C0 80 B8 60 AC 60 20 1A 03

Montreal:	unused	awaytxt	TL cor	TInner1	TInner2	TInner3		TInner4		TInner5
(9AF43C) 	00 00 	7B 6F 	0A 00 	0D 00	11 00 	14 00 		17 00 		1B 00	

		BInner5	BInner4	Binner3	Binner2	BInner1	BInner0		BR cor		border
		00 6C 	00 60 	00 54 	00 48 	00 3C 	00 30 		00 28 		1A 03

*awaytxt == all text on the screen, such as "Play Mode", "Reguar Season" is this color. The color is taken based on the "away" team.

Caution: Updating these pointers changes the color for the GAME SETUP screen, which is good, but it doesn't change how they appear in the game. So it's only a partial solution.

?bbbbbgg gggrrrrr

Color examples
Blue: 7C 00
Green: 03 E0
Red: 00 1F
Magenta: 7C1F

Gameplay involves another palette change by DMA xfer.
Which xfer?

And does it take place.. when?

It's function 808723
Exact line to kick off the xfer is
80:874B		8E 0B 42	STX $420B

9CA227

Gameplay palettes get loaded
	after the matchups screen
	before the "start game" screen
	
There are 2 xfers but it is believed to be the 1st one.
DMA[1]: CPU->PPU Mode:0 0x7E35F4->0x2122 Bytes:200 (inc) V:195 CGRAM: 00 (0)
DMA[1]: CPU->PPU Mode:0 0x7E35F4->0x2122 Bytes:200 (inc) V:195 CGRAM: 00 (0)
DMA[1]: CPU->PPU Mode:0 0x7E35F4->0x2122 Bytes:100 (inc) V:210 CGRAM: 00 (0)


Data xfered for the first call- it's graphics data for the background.
Doesn't affect player sprites.
98 7F BD 7F BA 7F 7B 6F 00 00 D6 5A AD 35 29 25
DB 5A 5F 4A 3B 35 4D 6E DB 12 D2 7E 84 10 72 7F
98 7F 7B 6F 52 4A 29 25 84 10 5B 02 B6 01 00 00
84 48 00 34 24 01 80 00 36 01 0D 00 B6 35 2D 11
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
00 40 BD 77 1A 00 94 52 BD 77 BD 77 D3 15 49 5A
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
73 4E 73 4E BD 77 84 10 4A 29 4A 29 D3 15 49 5A
98 7F 60 03 7B 03 1B 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
33 67 29 25 D6 5A 29 25 F7 5E 54 21 99 0A 2D 76
BF 36 32 25 39 32 31 6F 70 36 D6 31 12 42 D7 41
EC 03 18 63 73 4E 29 25 73 4E F5 11 55 1E 29 25
6B 3D 29 35 67 11 93 62 36 1D 52 29 FC 1D 17 36
98 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
98 7F BD 7F BA 7F 7B 6F 00 00 D6 5A AD 35 29 25
DB 5A 5F 4A 3B 35 4D 6E DB 12 D2 7E 84 10 72 7F
98 7F 7B 6F 52 4A 29 25 84 10 5B 02 B6 01 00 00
84 48 00 34 24 01 80 00 36 01 0D 00 B6 35 2D 11
F2 7F 84 10 00 00 7B 6F 0D 00 12 00 5B 4A B6 35
52 4A 7B 6F 9B 00 C0 22 5F 0D 14 08 FF 17 6F 7E
98 7F 60 03 60 27 60 37 60 4B 60 5B 60 6F 60 7F
E0 03 E0 13 E0 27 E0 37 E0 4B E0 5B E0 6F E0 7F
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
00 40 BD 77 1A 00 94 52 BD 77 BD 77 D3 15 49 5A
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
73 4E 73 4E BD 77 84 10 4A 29 4A 29 D3 15 49 5A
EC 03 18 63 73 4E 29 25 73 4E F5 11 55 1E 29 25
6B 3D 29 35 67 11 93 62 36 1D 52 29 FC 1D 17 36
98 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01

The 2nd call seems like what we want.
It's not in the 1st half
98 7F BD 7F BA 7F 7B 6F 00 00 D6 5A AD 35 29 25
DB 5A 5F 4A 3B 35 4D 6E DB 12 D2 7E 84 10 72 7F
98 7F 7B 6F 52 4A 29 25 84 10 5B 02 B6 01 00 00
84 48 00 34 24 01 80 00 36 01 0D 00 B6 35 2D 11
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
00 40 BD 77 1A 00 94 52 BD 77 BD 77 D3 15 49 5A
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
73 4E 73 4E BD 77 84 10 4A 29 4A 29 D3 15 49 5A
98 7F 60 03 7B 03 1B 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
33 67 29 25 D6 5A 29 25 F7 5E 54 21 99 0A 2D 76
BF 36 32 25 39 32 31 6F 70 36 D6 31 12 42 D7 41
EC 03 18 63 73 4E 29 25 73 4E F5 11 55 1E 29 25
6B 3D 29 35 67 11 93 62 36 1D 52 29 FC 1D 17 36
98 7F 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

It is in the 2nd half.
These are foreground palettes.

98 7F BD 7F BA 7F 7B 6F 00 00 D6 5A AD 35 29 25	// Palette 0
DB 5A 5F 4A 3B 35 4D 6E DB 12 D2 7E 84 10 72 7F

98 7F 7B 6F 52 4A 29 25 84 10 5B 02 B6 01 00 00	// Palette 1
84 48 00 34 24 01 80 00 36 01 0D 00 B6 35 2D 11

F2 7F 84 10 00 00 7B 6F 0D 00 12 00 5B 4A B6 35 // Palette 2
52 4A 7B 6F 9B 00 C0 22 5F 0D 14 08 FF 17 6F 7E

98 7F 60 03 60 27 60 37 60 4B 60 5B 60 6F 60 7F	// Palette 3 which is all cyan basically
E0 03 E0 13 E0 27 E0 37 E0 4B E0 5B E0 6F E0 7F

// palette 4, Montreal (7E3774) 
// also found at file offset 0xB4EAE in the ROM file.
ltcyan		grey		black	white	blue	white	red	skin
(unused)	skateblade	skate
F2 7F 		7B 6F 		00 00 	BD 77 	00 30 	BD 77 	1A 00 	58 42 

blue		white	red	ltgrey	white	white	wood	iceshadow
00 40 		BD 77 	1A 00 	94 52 	BD 77 	BD 77 	D3 15 	49 5A

// Palette 5, LA (7E3794)
// Also found at offset 0xB4B0E in the ROM file.
ltcyan		grey		black	mdgrey	black	mdgrey	mdgrey	skin
(unused)	skateblade	skate
F2 7F 		7B 6F 		00 00 	4A 29 	00 00 	4A 29 	4A 29 	58 42 

ltgrey		ltgrey		white	dkgrey	mdgrey	mdgrey	wood	iceshadow
73 4E 		73 4E 		BD 77 	84 10 	4A 29 	4A 29 	D3 15 	49 5A

// ... junk after this

Skater-palette data for each team

Anaheim - file offset 0xB4D4E
F2 7F 7B 6F 00 00 BD 77 00 00 80 29 BD 77 58 42
00 00 80 29 7B 6F B5 56 BD 77 BD 77 D3 15 49 5A

Boston - file offset 0xB49EE
F2 7F 7B 6F 00 00 4A 29 00 00 1B 03 4A 29 58 42
BD 77 1B 03 4A 29 84 10 4A 29 4A 29 D3 15 49 5A

Buffalo - file offset 0xB4D8E
F2 7F 7B 6F 00 00 BD 77 00 2C BD 77 80 60 58 42
80 60 80 60 1B 03 94 52 BD 77 1F 03 D3 15 49 5A

Calgary - file offset 0xB4A2E
F2 7F 7B 6F 00 00 3B 01 10 00 3B 01 3B 01 58 42
FC 02 FC 02 BD 77 93 00 3B 01 3B 01 D3 15 49 5A

Chicago - file offset 0xB4DCE
F2 7F 7B 6F 00 00 BD 77 00 00 BD 77 BD 77 58 42
00 00 1B 00 BD 77 94 52 BD 77 BD 77 D3 15 49 5A

Dallas - file offset 0xB4A6E
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
40 02 40 02 BD 77 84 10 4A 29 4A 29 D3 15 49 5A

Detroit - file offset 0xB4E0E
F2 7F 7B 6F 00 00 1B 00 10 00 BD 77 BD 77 58 42
1B 00 BD 77 1B 00 94 52 BD 77 BD 77 D3 15 49 5A

Edmonton - file offset 0xB4AAE
F2 7F 7B 6F 00 00 00 75 00 28 00 75 5D 01 58 42
BD 77 5D 01 00 75 00 30 00 75 BD 77 D3 15 49 5A

Florida - file offset 0xB4E4E
F2 7F 7B 6F 00 00 BD 77 60 30 BD 77 B9 00 58 42
54 02 54 02 B9 00 B5 56 BD 77 54 02 D3 15 49 5A

Hartford - file offset 0xB4AEE
F2 7F 7B 6F 00 00 49 60 00 2C 49 60 49 60 58 42
9C 73 73 4E A0 02 00 24 49 60 49 60 D3 15 49 5A

NewJerseyd - file offset 0xB4ECE
F2 7F 7B 6F 00 00 BD 77 00 00 BD 77 1C 00 58 42
63 0C 63 0C 1C 00 94 52 BD 77 63 0C D3 15 49 5A

NYIslanders - file offset 0xB4B6E
F2 7F 7B 6F 00 00 80 70 00 24 80 70 80 70 58 42
BD 77 D7 00 3B 01 00 28 80 70 80 70 D3 15 49 5A

NYRangers - file offset 0xB4F0E
F2 7F 7B 6F 00 00 BD 77 0D 00 BD 77 00 50 58 42
00 50 00 50 18 00 94 52 BD 77 18 00 D3 15 49 5A

Ottawa - file offset 0xB4BAE
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
A5 14 16 00 1C 00 84 10 4A 29 4A 29 D3 15 49 5A

Philly - file offset 0xB4F4E
F2 7F 7B 6F 00 00 BD 77 00 00 BD 77 7B 01 58 42
7B 01 7B 01 E7 1C 94 52 BD 77 E7 1C D3 15 49 5A

Pittsburgh - file offset 0xB4BEE
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
9C 73 BD 77 FF 1E 84 10 4A 29 4A 29 D3 15 49 5A

Quebec - file offset 0xB4F8E
F2 7F 7B 6F 00 00 BD 77 C2 38 BD 77 BD 77 58 42
85 51 BD 77 85 51 94 52 BD 77 BD 77 D3 15 49 5A

SanJose - file offset 0xB4C2E
F2 7F 7B 6F 00 00 44 56 00 00 44 56 44 56 58 42
BD 77 A5 14 52 4A 20 31 44 56 44 56 D3 15 49 5A

StLouis - file offset 0xB4FCE
F2 7F 7B 6F 00 00 BD 77 00 2C BD 77 BD 77 58 42
FB 02 DA 02 63 7C 94 52 BD 77 BD 77 D3 15 49 5A

TampaBay - file offset 0xB4C6E
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 BD 77 58 42
9C 73 00 6C BD 77 84 10 4A 29 4A 29 D3 15 49 5A

Toronto - file offset 0xB500E
F2 7F 7B 6F 00 00 BD 77 00 2C BD 77 BD 77 58 42
00 58 00 58 BD 77 94 52 BD 77 BD 77 D3 15 49 5A

Vancouver - file offset 0xB4CAE
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 4A 29 58 42
1A 00 A5 14 3C 03 84 10 4A 29 4A 29 D3 15 49 5A

Washington - file offset 0xB504E
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
1A 00 BD 77 17 00 94 52 BD 77 BD 77 D3 15 49 5A

Winnepeg - file offset 0xB4CEE
F2 7F 7B 6F 00 00 09 74 0D 00 09 74 09 74 58 42
BD 77 09 74 19 00 00 28 09 74 09 74 D3 15 49 5A

AllStarsEast 
home - file offset 0xB508E
F2 7F 7B 6F 00 00 BD 77 00 00 BD 77 A5 14 58 42
1B 01 1B 01 A5 14 94 52 BD 77 1B 01 D3 15 49 5A
away - file offset 0xB50AE

AllStarsWest - file offset 0xB
F2 7F 7B 6F 00 00 4A 29 00 00 4A 29 BD 77 58 42
1B 01 1B 01 BD 77 84 10 4A 29 1B 01 D3 15 49 5A

need to check- home and away colors appear to be in different locations so this list isn't complete

Montreal home player pallette is stored at ROM address 96ceae.
Just, this is NOT the palette for the multicolored subheader background.
F2 7F 7B 6F 00 00 BD 77 00 30 BD 77 1A 00 58 42
00 40 BD 77 1A 00 94 52 BD 77 BD 77 D3 15 49 5A

The set of 'home' palette data is 0x360 bytes, so is the 'away' data.

-- no more palette data higher up

0 Anaheim away player palette		- ROM address 96C9CE
1					- ROM address 96C9EE
2					- ROM address 96CA0E
3					- ROM address 96CA2E
4					- ROM address 96CA4E
5					- ROM address 96CA6E
6					- ROM address 96CA8E
7					- ROM address 96CAAE
8					- ROM address 96CACE
9					- ROM address 96CAEE
A LA away player palette		- ROM address 96CB0E
B Montreal away player palette		- ROM address 96CB2E
C					- ROM address 96CB4E
D					- ROM address 96CB6E
E					- ROM address 96CB8E
F					- ROM address 96CBAE
10					- ROM address 96CBCE
11					- ROM address 96CBEE
12					- ROM address 96CC0E
13					- ROM address 96CC2E
14					- ROM address 96CC4E
15					- ROM address 96CC6E
16					- ROM address 96CC8E
17					- ROM address 96CCAE
18					- ROM address 96CCCE
19					- ROM address 96CCEE
1A All Stars East away player palette	- ROM address 96CD0E
1B All Stars West away player palette	- ROM address 96CD2E

0 Anaheim home player palette		- ROM address 96CD4E
1					- ROM address 96CD6E
2					- ROM address 96CD8E
3					- ROM address 96CDAE
4					- ROM address 96CDCE
5					- ROM address 96CDEE
6					- ROM address 96CE0E
7 Edmonton				- ROM address 96CE2E
8 Florida				- ROM address 96CE4E
9 Hartford				- ROM address 96CE6E
A LA home player pallette 		- ROM address 96CE8E
B Montreal home player pallette 	- ROM address 96CEAE
C					- ROM address 96CECE
D					- ROM address 96CEEE
E					- ROM address 96CF0E
F					- ROM address 96CF2E
10					- ROM address 96CF4E
11					- ROM address 96CF6E
12					- ROM address 96CF8E
13					- ROM address 96CFAE
14					- ROM address 96CFCE
15					- ROM address 96CFEE
16					- ROM address 96D00E
17					- ROM address 96D02E
18					- ROM address 96D04E
19					- ROM address 96D06E
1A					- ROM address 96D08E
1B All Stars West home player palette	- ROM address 96D0AE


Palettes are stored in weird order

0	Anaheim
1	Boston
2	Buffalo

3	Calgary
Subheader color: Yellow/Orange
Subheader ROM address 9AF57C
Subheader color data:
00 00 7B 6F F2 01 54 82 B7 02 3A 83 9C 03 FF 83
5D 81 3A 01 18 01 F5 00 D2 80 AF 80 8D 80 1A 83


4	Chicago
Subheader color: Black/Red
Subheader ROM address 9AF53C
Subheader color data:
00 00 7B 6F 21 04 42 08 84 10 A5 94 E7 9C 29 A5
1B 00 18 00 16 00 13 00 10 00 0E 00 0B 00 1A 03


5	Dallas
Subheader color: Black/Green
Subheader ROM address 9af4FC
Subheader color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
A0 02 60 82 00 02 C0 01 80 81 20 81 E0 00 1A 83



6	Detroit
Subheader color: White/Red
Subheader ROM address 9AF55C
Subheader color data:
00 00 7B 6F AD 35 EF BD 31 C6 52 4A 94 52 D6 DA
1F 80 1C 00 19 00 16 00 13 00 10 00 0D 00 1A 03


7	Edmonton
Subheader color: Blue/Orange
Subheader ROM address 9af4Dc
Subheader color data:
00 00 7B 6F 00 24 00 30 00 3C 00 4C 00 58 00 64
7B 01 59 01 36 01 14 01 F1 00 CF 80 AD 80 1A 83



8	Florida
Subheader color: Blue/Orange
Subheader ROM address 9af4Bc
Subheader color data:
00 00 7B 6F 00 18 00 24 00 34 00 40 00 50 00 60
DF 00 BB 80 98 80 94 80 71 80 4D 00 4A 00 1A 03



9	Hartford
Subheader color: Green/Blue
Subheader ROM address 9af49c
Subheader color data:
00 00 7B 6F 00 01 40 01 80 01 E0 81 20 82 60 02
00 65 E0 58 C0 CC A0 C0 80 B8 60 AC 60 20 1A 03



Logo palette ROM address 9AF2FC
00 00 FF 7F 00 82 00 3C 00 2C 60 01 18 63 10 42
8C 31 08 A1 00 01 00 14 00 00 00 00 00 00 00 00


A	Los Angeles subheader palette is here:
ROM address 9af45c
This palette shares a color with text color
Subheader color: Black/Gray
Subheader color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
52 4A 10 42 CE 39 8C B1 6B AD 29 25 E7 1C 1A 83


Los Angeles logo palette is here: 9AF33C
Logo palette data: 
00 00 00 00 21 04 84 10 C6 98 08 A1 6B 2D AD 35
EF BD 31 C6 94 52 D6 DA 18 E3 7B 6F BD 77 FF FF

B	Montreal subheader palette is here:
Subheader ROM address 9af43c
Subheader color: Red/Blue
Subheader color data:
{0, 6f7b, a, d, 11, 14, 17, 1b, 6c00, 6000, 5400, 4800, 3c00, 3000, 2800, 31a
00 00 7B 6F 0A 00 0D 00 11 00 14 00 17 00 1B 00
00 6C 00 60 00 54 00 48 00 3C 00 30 00 28 1A 03

Logo ROM address 9aedfc
Logo color data:
00 00 13 00 17 00 12 00 0E 00 FF 7F 5A EB 94 52
EF BD 4A A9 84 10 00 80 10 66 00 64 00 48 00 34

C	New jersey subheader palette is here:
Subheader color: Black/Red
Subheader ROM address 9af41c
Subheader color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
1D 00 1A 00 17 00 13 00 10 00 0D 00 0A 00 1A 03

D	New york islanders
Subheader ROM address 9AF3FC
Subheader color: Blue/Orange
Subheader color data:
00 00 7B 6F 40 20 60 2C A0 3C C0 C8 E0 D8 20 E5
7E 01 5C 01 39 01 17 01 F5 00 D2 80 D0 80 1A 83


E	New york rangers
Subheader ROM address 9AF3DC
Subheader color: Red/Blue
Subheader color data:
00 00 7B 6F 0A 00 0D 00 11 00 15 00 19 00 1D 00
00 70 00 64 00 58 00 4C 00 40 00 34 00 28 1A 03


F	Ottawa
Subheader ROM address 9AF3BC
Subheader color: Black/Red
Subheader color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
18 00 15 00 13 00 10 00 0D 00 0B 00 08 00 1A 03


10	Philadelphia
Subheader ROM address 9AF39C
Subheader color: Black/Orange
Subheader color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
5E 01 3B 01 F8 00 D5 80 92 80 6F 80 2C 00 1A 03

11	Pittsburgh
Subheader ROM address 9AF37C
Subheader color: Yellow/Brown
Subheader color data:
00 00 7B 6F B0 01 13 82 96 02 19 83 7C 03 FF 03
29 A5 E7 1C C6 98 84 90 63 8C 21 04 00 00 1A 03


12	Quebec
Subheader color: LightBlue/White
9AF35C
subheader ROM address 9AF35C
Subheader color data:
00 00 7B 6F C0 34 E0 BC 20 C9 40 55 80 61 A0 ED
D6 DA 94 D2 73 CE 31 46 10 42 CE 39 AD B5 1A 83


13	San Jose 
Subheader color ROM address: 9AF31C
Subheader color: Black/Turquoise
Color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
60 56 20 4E E0 45 C0 BD 80 B5 40 AD 00 25 1A 03

14	St Louis 
Subheader color ROM address: 9AF2DC
Subheader color: Yellow/Blue
Color data:
00 00 7B 6F D1 09 34 86 B7 06 19 83 9C 03 FF 83
00 F4 00 68 00 5C 00 54 00 48 00 3C 00 30 1A 03


15	Tampa bay 
Subheader color ROM address 9AF2BC
Subheader Black/Blue
Color data:
00 00 7B 6F 00 00 21 04 63 0C A5 14 E7 9C 29 A5
00 7C 00 6C 00 60 00 54 00 48 00 38 00 2C 1A 03

1B	All Stars West
Subheader color ROM address 9AF51C
