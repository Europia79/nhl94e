// These are some code snippets related to loading strings like "Edmonton" or "Montreal" as they 
// appear in the GAME SETUP screen beside "Home" and "Away".

// LoadStringLocation()
// Precondition: team index saved at $B1 and also in acc
// Postcondition: address of that team's location string is stored at $8D
$9B/C5AB C9 0D 00    CMP #$000D              A:000B X:0002 Y:0002 P:envmxdizC	// Check if team is NYIslanders
$9B/C5AE F0 20       BEQ $20    [$C5D0]      A:000B X:0002 Y:0002 P:eNvmxdizc	// If so, goto LoadStringLocation_TeamIsNYIslanders

$9B/C5B0 C9 0E 00    CMP #$000E              A:000B X:0002 Y:0002 P:eNvmxdizc	// Check if team is NYRangers. 

										// Normally besides "Home" and "Visitor" it just shows a location like "Anaheim" or "Edmonton"
										// however it wouldn't help to do that for these 2 teams because it would just show "New York" for both of them.
										// So for these teams there's special logic to display the full name, either "NY Islanders" or "NY Rangers"
										
$9B/C5B3 F0 27       BEQ $27    [$C5DC]      A:000B X:0002 Y:0002 P:eNvmxdizc	// If so, goto LoadStringLocation_TeamIsNYRangers
$9B/C5B5 0A          ASL A                   A:000B X:0002 Y:0002 P:eNvmxdizc
$9B/C5B6 0A          ASL A                   A:0016 X:0002 Y:0002 P:envmxdizc
$9B/C5B7 A8          TAY                     A:002C X:0002 Y:0002 P:envmxdizc	// Store teamIndex*4 in Y so that it can be used as an array index later.

$9B/C5B8 A9 9C 00    LDA #$009C              A:002C X:0002 Y:002C P:envmxdizc	// General case
$9B/C5BB 85 8F       STA $8F    [$00:008F]   A:009C X:0002 Y:002C P:envmxdizc	
$9B/C5BD A9 E7 A5    LDA #$A5E7              A:009C X:0002 Y:002C P:envmxdizc	

$9B/C5C0 85 8D       STA $8D    [$00:008D]   A:A5E7 X:0002 Y:002C P:eNvmxdizc	// Store the literal address $9CA5E7 at $8D. 
										// If this address looks familiar, that's because it's the "main pointer table".
										// We offset into it using Y, which is teamIndex*4. It's *4 because each entry is 4 bytes long.

$9B/C5C2 B7 8D       LDA [$8D],y[$9C:A613]   A:A5E7 X:0002 Y:002C P:eNvmxdizc	// Load the low short for the current team data, from the main pointer table
$9B/C5C4 85 8D       STA $8D    [$00:008D]   A:C2DB X:0002 Y:002C P:eNvmxdizc	// Store in the low short of the result
$9B/C5C6 A0 04 00    LDY #$0004              A:C2DB X:0002 Y:002C P:eNvmxdizc
$9B/C5C9 18          CLC                     A:C2DB X:0002 Y:0004 P:envmxdizc

$9B/C5CA 77 8D       ADC [$8D],y[$9C:C2DF]   A:C2DB X:0002 Y:0004 P:envmxdizc	// 9CC2DB is the start of the montreal team's data, plus the header.
										// Acc = C2DB (the low short, coming from main ptr table).
										// [$8D] = 9CC2DB
										// Add 0279. This comes from the team header data.
										// Bytes 4 and 5 of the header data have the offset you need to get to the team strings.
										// It's low endian as usual.
										
$9B/C5CC 85 8D       STA $8D    [$00:008D]   A:C554 X:0002 Y:0004 P:eNvmxdizc	// 9CC554 is the start of the location string. (with its length prefix)

$9B/C5CE 80 16       BRA $16    [$C5E6]      A:C554 X:0002 Y:0004 P:eNvmxdizc	// goto LoadStringLocation_Done

LoadStringLocation_TeamIsNYIslanders:
$9B/C5D0 A9 9B 00    LDA #$009B              A:000D X:0002 Y:0002 P:envmxdiZC
$9B/C5D3 85 8F       STA $8F    [$00:008F]   A:009B X:0002 Y:0002 P:envmxdizC
$9B/C5D5 A9 E7 C5    LDA #$C5E7              A:009B X:0002 Y:0002 P:envmxdizC	// There is literally a hardcoded "NY Islanders" and "NY Rangers" copies of strings here, living outside the team data strings. lol ok.
$9B/C5D8 85 8D       STA $8D    [$00:008D]   A:C5E7 X:0002 Y:0002 P:eNvmxdizC
$9B/C5DA 80 0A       BRA $0A    [$C5E6]      A:C5E7 X:0002 Y:0002 P:eNvmxdizC	// goto LoadStringLocation_Done

LoadStringLocation_TeamIsNYRangers:
$9B/C5DC A9 9B 00    LDA #$009B              A:000E X:0004 Y:0004 P:envmxdiZC	// Hard-coded thingy
$9B/C5DF 85 8F       STA $8F    [$00:008F]   A:009B X:0004 Y:0004 P:envmxdizC
$9B/C5E1 A9 F5 C5    LDA #$C5F5              A:009B X:0004 Y:0004 P:envmxdizC
$9B/C5E4 85 8D       STA $8D    [$00:008D]   A:C5F5 X:0004 Y:0004 P:eNvmxdizC	// fall thru

LoadStringLocation_Done:
$9B/C5E6 6B          RTL                     A:C554 X:0002 Y:0004 P:eNvmxdizc

// Patching strategy
// Just store an array of string addresses, and patch this function to look up into the array of addresses. It might even be an optimization.


// Caller of ForEachCharacterInTeamName
$9D/AA70 A9 BC 34    LDA #$34BC              A:007E X:0002 Y:0002 P:envmxdizC
$9D/AA73 85 8D       STA $8D    [$00:008D]   A:34BC X:0002 Y:0002 P:envmxdizC
$9D/AA75 B7 8D       LDA [$8D],y[$7E:34BE]   A:34BC X:0002 Y:0002 P:envmxdizC	// Loads one of 0xB, 0xA. It's the team index. So e.g., 0xB for Montreal.
$9D/AA77 85 B1       STA $B1    [$00:00B1]   A:000B X:0002 Y:0002 P:envmxdizC	// Stash team index in $B1

$9D/AA79 22 AB C5 9B JSL $9BC5AB[$9B:C5AB]   A:000B X:0002 Y:0002 P:envmxdizC	// Call LoadStringLocation(). Stores string address in [$8D], like $9CC554

$9D/AA7D 22 BE C7 9E JSL $9EC7BE[$9E:C7BE]   A:C554 X:0002 Y:0004 P:eNvmxdizc	// Call ForEachCharacterInTeamName()

$9D/AA81 80 D1       BRA $D1    [$AA54]      A:C55E X:0002 Y:000A P:envmxdizc

// Function: ForEachCharacterInTeamName()
$9E/C7BE DA          PHX                     A:C554 X:0002 Y:0004 P:eNvmxdizc	// Back up X, restored on return
$9E/C7BF A0 02 00    LDY #$0002              A:C554 X:0002 Y:0004 P:eNvmxdizc	// Y used later i guess

$9E/C7C2 AD 11 0D    LDA $0D11  [$9F:0D11]   A:C554 X:0002 Y:0002 P:envmxdizc	// Load something- 0, 0, E, E, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 1A, 1A
										// This is $7E/0D11 in RAM.
										// The lower $2000 of $9F is just a shadow of $7E.
$9E/C7C5 0A          ASL A                   A:0010 X:0002 Y:0002 P:envmxdizc
$9E/C7C6 0A          ASL A                   A:0020 X:0002 Y:0002 P:envmxdizc
$9E/C7C7 0A          ASL A                   A:0040 X:0002 Y:0002 P:envmxdizc
$9E/C7C8 0A          ASL A                   A:0080 X:0002 Y:0002 P:envmxdizc
$9E/C7C9 0A          ASL A                   A:0100 X:0002 Y:0002 P:envmxdizc	// Multiply by 32 = 0x20

$9E/C7CA 6D 0F 0D    ADC $0D0F  [$9F:0D0F]   A:0200 X:0002 Y:0002 P:envmxdizc	// Add - 0, 0, 03, 11, 03, 11, 03, 11, 03, 11, 03, 11, 03, 11, 03, 11
$9E/C7CD 0A          ASL A                   A:0211 X:0002 Y:0002 P:envmxdizc	// Multiply by 2
$9E/C7CE 6D D9 0C    ADC $0CD9  [$9F:0CD9]   A:0422 X:0002 Y:0002 P:envmxdizc	// Add - 
$9E/C7D1 AA          TAX                     A:0422 X:0002 Y:0002 P:envmxdizc
$9E/C7D2 AF B6 35 7E LDA $7E35B6[$7E:35B6]   A:0422 X:0422 Y:0002 P:envmxdizc
$9E/C7D6 6F A8 35 7E ADC $7E35A8[$7E:35A8]   A:0201 X:0422 Y:0002 P:envmxdizc
$9E/C7DA 0D 0D 0D    ORA $0D0D  [$9F:0D0D]   A:0101 X:0422 Y:0002 P:envmxdizC
$9E/C7DD 85 14       STA $14    [$00:0014]   A:2101 X:0422 Y:0002 P:envmxdizC

ForEachCharacterInTeamName:
$9E/C7DF 98          TYA                     A:0212 X:0426 Y:0004 P:envmxdizc
$9E/C7E0 C7 8D       CMP [$8D]  [$9C:C554]   A:0004 X:0426 Y:0004 P:envmxdizc
$9E/C7E2 D0 03       BNE $03    [$C7E7]      A:0004 X:0426 Y:0004 P:eNvmxdizc // Skips over the below when not done

ForEachCharacterInTeamName_WhenDone:
$9E/C7E4 4C 81 C8    JMP $C881  [$9E:C881]   A:000A X:0432 Y:000A P:envmxdiZC	// goto ForEachCharacterInTeamName_Done

ForEachCharacterInTeamName_NotDone:
										// Precondition: something stored the address of the string at [$8D]
$9E/C7E7 B7 8D       LDA [$8D],y[$9C:C558]   A:0004 X:0426 Y:0004 P:eNvmxdizc	// Load a character of string data. E.g., 'M', 'o', 'n', 't', 'r'...
										// [$8D] stores 9CC554, and you add Y which starts at 2.
										// Y gets incremented for each character.

$9E/C7E9 89 80 00    BIT #$0080              A:746E X:0426 Y:0004 P:envmxdizc
$9E/C7EC D0 39       BNE $39    [$C827]      A:746E X:0426 Y:0004 P:envmxdiZc
$9E/C7EE 29 FF 00    AND #$00FF              A:746E X:0426 Y:0004 P:envmxdiZc
$9E/C7F1 C9 40 00    CMP #$0040              A:006E X:0426 Y:0004 P:envmxdizc
$9E/C7F4 D0 03       BNE $03    [$C7F9]      A:006E X:0426 Y:0004 P:envmxdizC
$9E/C7F9 DA          PHX                     A:006E X:0426 Y:0004 P:envmxdizC
$9E/C7FA 0A          ASL A                   A:006E X:0426 Y:0004 P:envmxdizC
$9E/C7FB AA          TAX                     A:00DC X:0426 Y:0004 P:envmxdizc
$9E/C7FC BF B6 CD 9A LDA $9ACDB6,x[$9A:CE92] A:00DC X:00DC Y:0004 P:envmxdizc	// Convert to uppercase? Probably not but that's what it looks like
$9E/C800 65 14       ADC $14    [$00:0014]   A:005A X:00DC Y:0004 P:envmxdizc
$9E/C802 FA          PLX                     A:395B X:00DC Y:0004 P:envmxdizc
$9E/C803 DF F4 37 7E CMP $7E37F4,x[$7E:3C1A] A:395B X:0426 Y:0004 P:envmxdizc
$9E/C807 F0 16       BEQ $16    [$C81F]      A:395B X:0426 Y:0004 P:envmxdizC
$9E/C809 9F F4 37 7E STA $7E37F4,x[$7E:3C1A] A:395B X:0426 Y:0004 P:envmxdizC
$9E/C80D 8A          TXA                     A:395B X:0426 Y:0004 P:envmxdizC
$9E/C80E 4A          LSR A                   A:0426 X:0426 Y:0004 P:envmxdizC
$9E/C80F CD D5 0C    CMP $0CD5  [$9F:0CD5]   A:0213 X:0426 Y:0004 P:envmxdizc
$9E/C812 B0 03       BCS $03    [$C817]      A:0213 X:0426 Y:0004 P:envmxdizC

$9E/C817 CD D7 0C    CMP $0CD7  [$9F:0CD7]   A:0213 X:0426 Y:0004 P:envmxdizC
$9E/C81A 90 03       BCC $03    [$C81F]      A:0213 X:0426 Y:0004 P:eNvmxdizc
$9E/C81F EE 0F 0D    INC $0D0F  [$9F:0D0F]   A:0213 X:0426 Y:0004 P:eNvmxdizc
$9E/C822 E8          INX                     A:0213 X:0426 Y:0004 P:envmxdizc
$9E/C823 E8          INX                     A:0213 X:0427 Y:0004 P:envmxdizc

$9E/C824 C8          INY                     A:0213 X:0428 Y:0004 P:envmxdizc // characterIndex++

$9E/C825 80 B8       BRA $B8    [$C7DF]      A:0213 X:0428 Y:0005 P:envmxdizc // Loop ForEachCharacterInTeamName, e.g., 'M' then 'o' in Montreal

...
$9E/C87A 8D 11 0D    STA $0D11  [$9F:0D11]   A:0000 X:0002 Y:0004 P:envmxdiZc // 
...

ForEachCharacterInTeamName_Done:
$9E/C881 18          CLC                     A:000A X:0432 Y:000A P:envmxdiZC
$9E/C882 65 8D       ADC $8D    [$00:008D]   A:000A X:0432 Y:000A P:envmxdiZc
$9E/C884 85 8D       STA $8D    [$00:008D]   A:C55E X:0432 Y:000A P:eNvmxdizc
$9E/C886 FA          PLX                     A:C55E X:0432 Y:000A P:eNvmxdizc
$9E/C887 6B          RTL                     A:C55E X:0002 Y:000A P:envmxdizc


    `Anaheim = 0x0,	9CED2C
    `Boston = 0x1,	9CAE0E
    `Buffalo = 0x2,	9CB096
    `Calgary = 0x3,	9CB316
    `Chicago = 0x4,	9CB5AC
    `Dallas = 0x5,	9CC2B9
    `Detroit = 0x6,	9CB873
    `Edmonton = 0x7,	9CBAF1
    `Florida = 0x8,	9CEB2A
    `Hartford = 0x9,	9CBD83
    `LAKings = 0xA,	9CC022
    `Montreal = 0xB,	9CC554
    `NewJersey = 0xC,	9CC800
    `NYIslanders = 0xD,	9BC5E7
    `NYRangers = 0xE,	9BC5F5
    `Ottawa = 0xF,	9CCF80
    `Philly = 0x10,	9CD212
    `Pittsburgh = 0x11,	9CD4AA
    `Quebec = 0x12,	9CD735
    `SanJose = 0x13,	9CD9AE
    `StLouis = 0x14,	9CDC22
    `TampaBay = 0x15,	9CDEB7
    `Toronto = 0x16,	9CE14F
    `Vancouver = 0x17,	9CE3DA
    `Washington = 0x18,	9CE922
    `Winnepeg = 0x19,	9CE688
    `AllStarsEast = 0x1A,	9CA8D6
    `AllStarsWest = 0x1B		9CAB7E