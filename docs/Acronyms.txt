
// Caller of LoadAcronymString
// 
$9F/BD6D 85 8D       STA $8D    [$00:008D]   A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD6F A9 9C 00    LDA #$009C              A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD72 85 8F       STA $8F    [$00:008F]   A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD74 A5 B1       LDA $B1    [$00:00B1]   A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD76 F0 05       BEQ $05    [$BD7D]      A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD78 AD DE 1C    LDA $1CDE  [$9F:1CDE]   A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD7B 85 8D       STA $8D    [$00:008D]   A:C02F X:0000 Y:0004 P:eNvmxdizc
$9F/BD7D A0 04 00    LDY #$0004              A:C02F X:0000 Y:0004 P:eNvmxdizc

$9F/BD80 B7 8D       LDA [$8D],y[$9C:BDB6]   A:BDB2 X:0000 Y:0004 P:envmxdizc	; $8D stores the start of team data,
										; likely loaded from main pointer 
										; table.
										; E.g., 9CBDB6 points to the start 
										; of team data for a particular 
										; team.
$9F/BD82 18          CLC                     A:0270 X:0000 Y:0004 P:envmxdizc
$9F/BD83 65 8D       ADC $8D    [$00:008D]   A:0270 X:0000 Y:0004 P:envmxdizc
$9F/BD85 85 8D       STA $8D    [$00:008D]   A:C022 X:0000 Y:0004 P:eNvmxdizc

$9F/BD87 A7 8D       LDA [$8D]  [$9C:C022]   A:C022 X:0000 Y:0004 P:eNvmxdizc	; $8D points to the start of the
										; team-related strings.
										; The first string in the table is 
										; the length-prefixed team location.
										; We want to skip over that, so load
										; the length value to get added
										; E.g., length value is 0D

$9F/BD89 65 8D       ADC $8D    [$00:008D]   A:000D X:0000 Y:0004 P:envmxdizc	; Use length value to advance the 
										; index

$9F/BD8B 85 8D       STA $8D    [$00:008D]   A:C02F X:0000 Y:0004 P:eNvmxdizc	; store addr of string to load
$9F/BD8D 22 BE C7 9E JSL $9EC7BE[$9E:C7BE]   A:C02F X:0000 Y:0004 P:eNvmxdizc	; Call LoadAcronymString()

// LoadAcronymString()
// Precondition: [$8D] contains utility-string pointer. E.g., A3 F5 9C = 9CF5A3
// 9CF5A3 is the start of a bunch of strings like "Game Setup", "Player select"
// This routine is not just for loading team acronyms like "MTL". It gets used for other kinds of 
// non-team-related strings also during loading of the GAME SETUP menu
// 5E C5 9C is loaded into $8D for loading "MTL".

$9E/C7BE DA          PHX                     A:0000 X:0000 Y:0000 P:envmxdiZc
$9E/C7BF A0 02 00    LDY #$0002              A:0000 X:0000 Y:0000 P:envmxdiZc
$9E/C7C2 AD 11 0D    LDA $0D11  [$9F:0D11]   A:0000 X:0000 Y:0002 P:envmxdizc
$9E/C7C5 0A          ASL A                   A:000E X:0000 Y:0002 P:envmxdizc
$9E/C7C6 0A          ASL A                   A:001C X:0000 Y:0002 P:envmxdizc
$9E/C7C7 0A          ASL A                   A:0038 X:0000 Y:0002 P:envmxdizc
$9E/C7C8 0A          ASL A                   A:0070 X:0000 Y:0002 P:envmxdizc
$9E/C7C9 0A          ASL A                   A:00E0 X:0000 Y:0002 P:envmxdizc
$9E/C7CA 6D 0F 0D    ADC $0D0F  [$9F:0D0F]   A:01C0 X:0000 Y:0002 P:envmxdizc
$9E/C7CD 0A          ASL A                   A:01C3 X:0000 Y:0002 P:envmxdizc
$9E/C7CE 6D D9 0C    ADC $0CD9  [$9F:0CD9]   A:0386 X:0000 Y:0002 P:envmxdizc
$9E/C7D1 AA          TAX                     A:0386 X:0000 Y:0002 P:envmxdizc
$9E/C7D2 AF B6 35 7E LDA $7E35B6[$7E:35B6]   A:0386 X:0386 Y:0002 P:envmxdizc
$9E/C7D6 6F A8 35 7E ADC $7E35A8[$7E:35A8]   A:0201 X:0386 Y:0002 P:envmxdizc
$9E/C7DA 0D 0D 0D    ORA $0D0D  [$9F:0D0D]   A:0101 X:0386 Y:0002 P:envmxdizC
$9E/C7DD 85 14       STA $14    [$00:0014]   A:3901 X:0386 Y:0002 P:envmxdizC

LoadAcronymByte_Iter:
$9E/C7DF 98          TYA                     A:031D X:063C Y:0004 P:envmxdizc
$9E/C7E0 C7 8D       CMP [$8D]  [$9C:C55E]   A:0004 X:063C Y:0004 P:envmxdizc	; 9CC55E points to the preceeding 
										; len before acronym string
$9E/C7E2 D0 03       BNE $03    [$C7E7]      A:0004 X:063C Y:0004 P:eNvmxdizc

LoadAcronymByte:
// Load the first byte of the acronym
$9E/C7E7 B7 8D       LDA [$8D],y[$9C:C560]   A:0002 X:0638 Y:0002 P:eNvmxdizc	; Y=characterIndex+2

$9E/C7E9 89 80 00    BIT #$0080              A:544D X:0638 Y:0002 P:envmxdizc
$9E/C7EC D0 39       BNE $39    [$C827]      A:544D X:0638 Y:0002 P:envmxdiZc	; Glyph 0x80 is special delimiter
$9E/C7EE 29 FF 00    AND #$00FF              A:544D X:0638 Y:0002 P:envmxdiZc	; Masking out of upper byte. 
										; Seems unnecessary but ok
$9E/C7F1 C9 40 00    CMP #$0040              A:004D X:0638 Y:0002 P:envmxdizc	; Glyph 0x40 is also a special 
										; delimiter
$9E/C7F4 D0 03       BNE $03    [$C7F9]      A:004D X:0638 Y:0002 P:envmxdizC	; fall thru to handler for it if so
... handler for 0x40 special character

NotASpecialCharacter:
$9E/C7F9 DA          PHX                     A:004D X:0638 Y:0002 P:envmxdizC	; Backup x because we are going
										; to scramble it with indexing
										
$9E/C7FA 0A          ASL A                   A:004D X:0638 Y:0002 P:envmxdizC	; turn glyph index into an offset
$9E/C7FB AA          TAX                     A:009A X:0638 Y:0002 P:envmxdizc	; Use source glyph offset as index
$9E/C7FC BF B6 CD 9A LDA $9ACDB6,x[$9A:CE50] A:009A X:009A Y:0002 P:envmxdizc	; Load dest glyph from 
										; character table
$9E/C800 65 14       ADC $14    [$00:0014]   A:003A X:009A Y:0002 P:envmxdizc
$9E/C802 FA          PLX                     A:22DA X:009A Y:0002 P:envmxdizc	; Restore x
$9E/C803 DF F4 37 7E CMP $7E37F4,x[$7E:3E2C] A:22DA X:0638 Y:0002 P:envmxdizc	; Compare against table value
$9E/C807 F0 16       BEQ $16    [$C81F]      A:22DA X:0638 Y:0002 P:eNvmxdizc	; goto DoneCompares if equal
$9E/C809 9F F4 37 7E STA $7E37F4,x[$7E:3E2C] A:22DA X:0638 Y:0002 P:eNvmxdizc
$9E/C80D 8A          TXA                     A:22DA X:0638 Y:0002 P:eNvmxdizc
$9E/C80E 4A          LSR A                   A:0638 X:0638 Y:0002 P:envmxdizc
$9E/C80F CD D5 0C    CMP $0CD5  [$9F:0CD5]   A:031C X:0638 Y:0002 P:envmxdizc
$9E/C812 B0 03       BCS $03    [$C817]      A:031C X:0638 Y:0002 P:envmxdizC
... ; skipped
$9E/C817 CD D7 0C    CMP $0CD7  [$9F:0CD7]   A:031C X:0638 Y:0002 P:envmxdizC
$9E/C81A 90 03       BCC $03    [$C81F]      A:031C X:0638 Y:0002 P:eNvmxdizc
... ; skipped

DoneCompares:
$9E/C81F EE 0F 0D    INC $0D0F  [$9F:0D0F]   A:031C X:0638 Y:0002 P:eNvmxdizc	; increment some coupled counter
$9E/C822 E8          INX                     A:031C X:0638 Y:0002 P:envmxdizc
$9E/C823 E8          INX                     A:031C X:0639 Y:0002 P:envmxdizc
$9E/C824 C8          INY                     A:031C X:063A Y:0002 P:envmxdizc
$9E/C825 80 B8       BRA $B8    [$C7DF]      A:031C X:063A Y:0003 P:envmxdizc	; goto LoadAcronymByte

$9E/C7DF 98          TYA                     A:031C X:063A Y:0003 P:envmxdizc
$9E/C7E0 C7 8D       CMP [$8D]  [$9C:C55E]   A:0003 X:063A Y:0003 P:envmxdizc
$9E/C7E2 D0 03       BNE $03    [$C7E7]      A:0003 X:063A Y:0003 P:eNvmxdizc

// Load the second byte of the acronym
$9E/C7E7 B7 8D       LDA [$8D],y[$9C:C561]   A:0003 X:063A Y:0003 P:eNvmxdizc

$9E/C7E9 89 80 00    BIT #$0080              A:4C54 X:063A Y:0003 P:envmxdizc
$9E/C7EC D0 39       BNE $39    [$C827]      A:4C54 X:063A Y:0003 P:envmxdiZc
$9E/C7EE 29 FF 00    AND #$00FF              A:4C54 X:063A Y:0003 P:envmxdiZc
$9E/C7F1 C9 40 00    CMP #$0040              A:0054 X:063A Y:0003 P:envmxdizc
$9E/C7F4 D0 03       BNE $03    [$C7F9]      A:0054 X:063A Y:0003 P:envmxdizC
$9E/C7F9 DA          PHX                     A:0054 X:063A Y:0003 P:envmxdizC
$9E/C7FA 0A          ASL A                   A:0054 X:063A Y:0003 P:envmxdizC
$9E/C7FB AA          TAX                     A:00A8 X:063A Y:0003 P:envmxdizc
$9E/C7FC BF B6 CD 9A LDA $9ACDB6,x[$9A:CE5E] A:00A8 X:00A8 Y:0003 P:envmxdizc
$9E/C800 65 14       ADC $14    [$00:0014]   A:0040 X:00A8 Y:0003 P:envmxdizc
$9E/C802 FA          PLX                     A:22E0 X:00A8 Y:0003 P:envmxdizc
$9E/C803 DF F4 37 7E CMP $7E37F4,x[$7E:3E2E] A:22E0 X:063A Y:0003 P:envmxdizc
$9E/C807 F0 16       BEQ $16    [$C81F]      A:22E0 X:063A Y:0003 P:eNvmxdizc
$9E/C809 9F F4 37 7E STA $7E37F4,x[$7E:3E2E] A:22E0 X:063A Y:0003 P:eNvmxdizc
$9E/C80D 8A          TXA                     A:22E0 X:063A Y:0003 P:eNvmxdizc
$9E/C80E 4A          LSR A                   A:063A X:063A Y:0003 P:envmxdizc
$9E/C80F CD D5 0C    CMP $0CD5  [$9F:0CD5]   A:031D X:063A Y:0003 P:envmxdizc
$9E/C812 B0 03       BCS $03    [$C817]      A:031D X:063A Y:0003 P:envmxdizC
$9E/C817 CD D7 0C    CMP $0CD7  [$9F:0CD7]   A:031D X:063A Y:0003 P:envmxdizC
$9E/C81A 90 03       BCC $03    [$C81F]      A:031D X:063A Y:0003 P:eNvmxdizc
$9E/C81F EE 0F 0D    INC $0D0F  [$9F:0D0F]   A:031D X:063A Y:0003 P:eNvmxdizc
$9E/C822 E8          INX                     A:031D X:063A Y:0003 P:envmxdizc
$9E/C823 E8          INX                     A:031D X:063B Y:0003 P:envmxdizc
$9E/C824 C8          INY                     A:031D X:063C Y:0003 P:envmxdizc
$9E/C825 80 B8       BRA $B8    [$C7DF]      A:031D X:063C Y:0004 P:envmxdizc

LoadAcronymByte_Iter:
$9E/C7DF 98          TYA                     A:031D X:063C Y:0004 P:envmxdizc
$9E/C7E0 C7 8D       CMP [$8D]  [$9C:C55E]   A:0004 X:063C Y:0004 P:envmxdizc
$9E/C7E2 D0 03       BNE $03    [$C7E7]      A:0004 X:063C Y:0004 P:eNvmxdizc
// Load the third byte of the acronym
$9E/C7E7 B7 8D       LDA [$8D],y[$9C:C562]   A:0004 X:063C Y:0004 P:eNvmxdizc
$9E/C7E9 89 80 00    BIT #$0080              A:0B4C X:063C Y:0004 P:envmxdizc
$9E/C7EC D0 39       BNE $39    [$C827]      A:0B4C X:063C Y:0004 P:envmxdiZc
$9E/C7EE 29 FF 00    AND #$00FF              A:0B4C X:063C Y:0004 P:envmxdiZc
$9E/C7F1 C9 40 00    CMP #$0040              A:004C X:063C Y:0004 P:envmxdizc
$9E/C7F4 D0 03       BNE $03    [$C7F9]      A:004C X:063C Y:0004 P:envmxdizC
$9E/C7F9 DA          PHX                     A:004C X:063C Y:0004 P:envmxdizC
$9E/C7FA 0A          ASL A                   A:004C X:063C Y:0004 P:envmxdizC
$9E/C7FB AA          TAX                     A:0098 X:063C Y:0004 P:envmxdizc
$9E/C7FC BF B6 CD 9A LDA $9ACDB6,x[$9A:CE4E] A:0098 X:0098 Y:0004 P:envmxdizc
$9E/C800 65 14       ADC $14    [$00:0014]   A:0039 X:0098 Y:0004 P:envmxdizc
$9E/C802 FA          PLX                     A:22D9 X:0098 Y:0004 P:envmxdizc
$9E/C803 DF F4 37 7E CMP $7E37F4,x[$7E:3E30] A:22D9 X:063C Y:0004 P:envmxdizc
$9E/C807 F0 16       BEQ $16    [$C81F]      A:22D9 X:063C Y:0004 P:eNvmxdizc
$9E/C809 9F F4 37 7E STA $7E37F4,x[$7E:3E30] A:22D9 X:063C Y:0004 P:eNvmxdizc
$9E/C80D 8A          TXA                     A:22D9 X:063C Y:0004 P:eNvmxdizc
$9E/C80E 4A          LSR A                   A:063C X:063C Y:0004 P:envmxdizc
$9E/C80F CD D5 0C    CMP $0CD5  [$9F:0CD5]   A:031E X:063C Y:0004 P:envmxdizc
$9E/C812 B0 03       BCS $03    [$C817]      A:031E X:063C Y:0004 P:envmxdizC
$9E/C817 CD D7 0C    CMP $0CD7  [$9F:0CD7]   A:031E X:063C Y:0004 P:envmxdizC
$9E/C81A 90 03       BCC $03    [$C81F]      A:031E X:063C Y:0004 P:eNvmxdizc
$9E/C81F EE 0F 0D    INC $0D0F  [$9F:0D0F]   A:031E X:063C Y:0004 P:eNvmxdizc
$9E/C822 E8          INX                     A:031E X:063C Y:0004 P:envmxdizc
$9E/C823 E8          INX                     A:031E X:063D Y:0004 P:envmxdizc
$9E/C824 C8          INY                     A:031E X:063E Y:0004 P:envmxdizc
$9E/C825 80 B8       BRA $B8    [$C7DF]      A:031E X:063E Y:0005 P:envmxdizc

C827 is for special delimiter

$9E/C7DF 98          TYA                     A:031E X:063E Y:0005 P:envmxdizc	; Move character index to acc
										
										; Compare character index to 
										; length prefix.
										; In other words,
$9E/C7E0 C7 8D       CMP [$8D]  [$9C:C55E]   A:0005 X:063E Y:0005 P:envmxdizc	; Check if we are done loading
$9E/C7E2 D0 03       BNE $03    [$C7E7]      A:0005 X:063E Y:0005 P:envmxdiZC	; if so, goto LoadAcronymByte

$9E/C7E4 4C 81 C8    JMP $C881  [$9E:C881]   A:0005 X:063E Y:0005 P:envmxdiZC	; Didn't take the above jump.
										; means we're done.
										; goto DoneLoading

DoneLoading:
$9E/C881 18          CLC                     A:0005 X:063E Y:0005 P:envmxdiZC
$9E/C882 65 8D       ADC $8D    [$00:008D]   A:0005 X:063E Y:0005 P:envmxdiZc
$9E/C884 85 8D       STA $8D    [$00:008D]   A:C563 X:063E Y:0005 P:eNvmxdizc
$9E/C886 FA          PLX                     A:C563 X:063E Y:0005 P:eNvmxdizc
$9E/C887 6B          RTL                     A:C563 X:0000 Y:0005 P:envmxdiZc