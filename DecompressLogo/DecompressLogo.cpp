// DecompressLogo.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <vector>
#include <assert.h>

std::vector<unsigned char> romData;
std::vector<unsigned char> out;

// Initial values
unsigned char decompressedValueDictionary_7E0500[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFE, 0xFE, 0xFE, 0xFE, 0x06, 0x06, 0x0C, 0x0C, 0x0F, 0x0F, 0x18, 0x18, 0x30, 0x30, 0x3F, 0x3F, 0x60, 0x60, 0x70, 0x70, 0x7F, 0x7F, 0xB2, 0xB2, 0xF8, 0xF8, 0xFC, 0xFC, 0x05, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x11, 0x14, 0x1C, 0x1E, 0x21, 0x24, 0x28, 0x2F, 0x38, 0x3C, 0x78, 0x7E, 0x8F, 0x90, 0x9F, 0xA0, 0xB0, 0xBF, 0xDF, 0xEF, 0xF7, 0xF9, 0xFB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x12, 0x12, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
unsigned char array_7E0600[] = { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x12, 0x12, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x0C, 0x00, 0x1E, 0x00 };

int pointer_0C = 0x81CD9C;
unsigned char lastWrittenValue_08 = 0;
unsigned short key_6C = 0xA6C0;
unsigned short value_6F = 0xA000;
unsigned short value_14 = 0;
unsigned char repeatedValueMeta_74 = 0x7;

unsigned char argument_X_C17C = 0;

int jumpElements_BF0A[] = { 0, 0, 0x80BD11 };
int jumpElements_BD7A[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0x80BEF3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80BD8E };
int jumpElements_BCF9[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80BD70 };
int jumpElements_BD2D[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80BEF2, 0, 0x80BF44 };
int jumpElements_BF5D[] = { 0, 0, 0x80BD5E};
int jumpValue = 0;
int previousJumpValue = 0;


int ROMAddressToFileOffset(int romAddress)
{
    assert(romAddress >= 0x800000); // Lower ones haven't been tested

    int offsetWithinSection = romAddress % 0x8000;

    int section = (romAddress - 0x800000) >> 16;

    int offset = section * 0x8000 + offsetWithinSection;

    return offset;
}

int FileOffsetToROMAddress(int fileOffset)
{
    int section = fileOffset / 0x8000;

    int offsetWithinSection = fileOffset % 0x8000;

    int addr = 0x800000 + (section * 0x10000) + 0x8000 + offsetWithinSection;

    return addr;
}


unsigned char GetROMData(int ptr)
{
    unsigned char data = romData[ROMAddressToFileOffset(ptr)];
    return data;
}

void SetJumpValue(int newValue)
{
    previousJumpValue = jumpValue;
    jumpValue = newValue;
}

void Impl_BD11()
{
    int arrayIndex_6D = key_6C >> 8; // Might not be safe, we're technically supposed to save this before the jump.

    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    lastWrittenValue_08 = decompressed;

    key_6C = key_6C * 4;

    unsigned short high = key_6C;
    unsigned char low = GetROMData(pointer_0C);
    pointer_0C++;

    unsigned short combinedKey = high | low;
    key_6C = combinedKey;

    arrayIndex_6D = key_6C >> 8;
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BD2D[jumpElement]);
}

void Impl_BD5E()
{
    int arrayIndex_6D = key_6C >> 8; // Might not be safe, we're technically supposed to save this before the jump.

    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    lastWrittenValue_08 = decompressed;

    key_6C = key_6C * 2;

    unsigned short high = key_6C;
    unsigned char low = GetROMData(pointer_0C);
    pointer_0C++;

    unsigned short combinedKey = high | low;
    key_6C = combinedKey;

    key_6C = key_6C * 2;

    arrayIndex_6D = key_6C >> 8;
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BD7A[jumpElement]);

}

void Impl_BD70()
{
    unsigned char jumpSeek = key_6C >> 8;
    int jumpElement = array_7E0600[jumpSeek];
    SetJumpValue(jumpElements_BD7A[jumpElement]);
}

void Impl_BD8E()
{
    SetJumpValue(0x80C17C);
    argument_X_C17C = 0xE;
}

void Impl_BEB5()
{
    SetJumpValue(0x80C17C);
    argument_X_C17C = 0x6;
}

void Impl_BEF2(int multiplier)
{
    int arrayIndex_6D = key_6C >> 8;
    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    lastWrittenValue_08 = decompressed;

    key_6C = key_6C * multiplier; // OK to overflow

    arrayIndex_6D = key_6C >> 8;
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BF0A[jumpElement]);
}

void Impl_BF44()
{
    int arrayIndex_6D = key_6C >> 8; // Might not be safe, we're technically supposed to save this before the jump.

    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    lastWrittenValue_08 = decompressed;

    key_6C = key_6C * 128;

    arrayIndex_6D = key_6C >> 8;
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BF5D[jumpElement]);
}

struct Result_C2DC
{
    unsigned short Result0_A;
    unsigned short Result1_X;
    unsigned short Result2_Y;
};

Result_C2DC Fn_C2DC(unsigned short param1_X)
{
    unsigned short param0_A = key_6C;
    unsigned short param2_Y = repeatedValueMeta_74; // Dunno what this is

    do
    {
        param0_A *= 2;
        param1_X -= 2;
        if (param1_X == 0)
        {
            unsigned char low = GetROMData(pointer_0C);
            param0_A = param0_A & 0xFF00;
            param0_A = param0_A | low;
            pointer_0C++;
            param1_X = 16;
        }
        param2_Y--;
    } while (param2_Y > 0);

    Result_C2DC result = { param0_A, param1_X, param2_Y };
    return result;
}

struct Result_C232
{
    unsigned short Result0_A;
};

unsigned short RotateLeft(unsigned short v)
{
    bool high = v >= 0x8000;
    v = v << 1;
    if (high)
    {
        v |= 1;
    }
    return v;
}

Result_C232 Fn_C232(unsigned short param1_X)
{
    // Postconditions: Result1_08 contains the repeated value and Result0_A contains the repeat count.
    Result_C232 result{};

    unsigned short acc = key_6C;
    bool shift = acc > 0x7FFF;
    acc = acc * 2;
    param1_X-=2;

    if (param1_X == 0)
    {
        // goto C250
        assert(false);
    }
    else
    {
        if (!shift) // went to C277
        {
            unsigned short y = 2;
            bool shift = acc > 0x7FFF;
            acc = acc * 2;
            param1_X -= 2;
            if (param1_X == 0)
            {
                // goto C2A2
                assert(false);
            }
            y++;
            if (!shift)
            {
                // goto c279
                assert(false);
            }
            else
            {
                value_14 = y;

                while (1) // C283
                {
                    acc = acc * 2;
                    value_6F = RotateLeft(value_6F);
                    param1_X -= 2;
                    if (param1_X == 0)
                    {
                        // C2AE
                        unsigned char low = GetROMData(pointer_0C);
                        acc = acc & 0xFF00;
                        acc = acc | low;
                        pointer_0C++;
                        param1_X = 0x10;
                    }
                    y--; // C28A
                    if (y != 0)
                    {
                        // Continue in loop
                    }
                    else
                    {
                        // C28D
                        key_6C = acc;
                        y = param1_X;
                        acc = value_14;
                        acc = acc & 0xFF;
                        acc *= 2;
                        param1_X = acc;

                        int loadAddress = 0x80C2B6 + acc;
                        acc = GetROMData(loadAddress);

                        param1_X = y;
                        acc += value_6F;
                        value_6F = acc;

                        result.Result0_A = acc;
                        return result;
                    }
                }
            }


        }
        else
        {
            // fell thru to C23D
            assert(false);            
        }
    }

    return result;
}

void Impl_C17C()
{
    unsigned char repeatingValue = 0;
    int repeatCount = 0;

    Result_C2DC resultC2DC = Fn_C2DC(argument_X_C17C);
    key_6C = resultC2DC.Result0_A;

    Result_C232 resultC232 = Fn_C232(resultC2DC.Result1_X);

    repeatingValue = lastWrittenValue_08;
    repeatCount = resultC232.Result0_A;

    if (repeatCount == 0)
    {
        SetJumpValue(0x80C195);
        return;
    }

    for (int i = 0; i < repeatCount; ++i)
    {
        out.push_back(repeatingValue);
    }

    SetJumpValue(jumpElements_BCF9[argument_X_C17C]);
}

int main()
{    
    FILE* file{};
    fopen_s(&file, "E:\\Emulation\\SNES\\Images\\Test\\nhl94.sfc", "rb");
    fseek(file, 0, SEEK_END);
    long length = ftell(file);

    romData.resize(length);
    fseek(file, 0, SEEK_SET);
    fread(romData.data(), 1, length, file);
    fclose(file);

    SetJumpValue(0x80C17C);
    argument_X_C17C = 0XE;

    for (int i = 0; i < 32; ++i)
    {
        switch (jumpValue)
        {
            case 0x80BD11: Impl_BD11(); break;
            case 0x80BD5E: Impl_BD5E(); break;
            case 0x80BD70: Impl_BD70(); break;
            case 0x80BD8E: Impl_BD8E(); break;
            case 0x80BEB5: Impl_BEB5(); break;
            case 0x80BEF2: Impl_BEF2(64); break;
            case 0x80BEF3: Impl_BEF2(32); break;
            case 0x80BF44: Impl_BF44(); break;
            case 0x80C17C: Impl_C17C(); break;
            default: assert(false);
        }
    }

    unsigned char expected[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x07, 0x03, 0x0F, 0x07 };
}