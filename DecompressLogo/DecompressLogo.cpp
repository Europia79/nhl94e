// DecompressLogo.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <vector>
#include <assert.h>

std::vector<unsigned char> romData;
std::vector<unsigned char> out;

// Bootstrap
// 1. Break-on-write 7FA671
// 2. Step in to the first jump- 80BDE1

// Snapshot is at
// $80/BDC5 7C C8 BD    JMP ($BDC8,x)[$80:BDE1] A:CE14 X:0010 Y:00CE P:envmXdizc

// Initial values
unsigned char decompressedValueDictionary_7E0500[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFE, 0xFE, 0xFE, 0xFE, 0x06, 0x06, 0x0C, 0x0C, 0x0F, 0x0F, 0x18, 0x18, 0x30, 0x30, 0x3F, 0x3F, 0x60, 0x60, 0x70, 0x70, 0x7F, 0x7F, 0xB2, 0xB2, 0xF8, 0xF8, 0xFC, 0xFC, 0x05, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x11, 0x14, 0x1C, 0x1E, 0x21, 0x24, 0x28, 0x2F, 0x38, 0x3C, 0x78, 0x7E, 0x8F, 0x90, 0x9F, 0xA0, 0xB0, 0xBF, 0xDF, 0xEF, 0xF7, 0xF9, 0xFB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x12, 0x12, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 };
unsigned char array_7E0600[] = { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x12, 0x12, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x0C, 0x00, 0x1E, 0x00 };

unsigned short argument_A_BE0D = 0;

unsigned short argument_A_BFDD = 0;

unsigned short argument_A_C10E = 0;
unsigned short argument_Y_C10E = 0;

unsigned short argument_X_C17C = 0;

struct Wram
{
    std::vector<unsigned char> Data;

    Wram()
    {
        unsigned char dataAt_7FA671_Write[] = { 0xCA, 0xFD, 0x0A, 0x00, 0x3B, 0x00, 0xCA, 0x8E, 0x00, 0x01, 0x10, 0x00, 0x9B, 0xCD, 0x81, 0x00, 0x00, 0x78, 0x7F, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x9E, 0x00, 0xCA, 0x00, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x00, 0x00, 0x03, 0x00, 0xF0, 0xFF, 0x00, 0x01, 0xF0, 0xFF, 0xE0, 0x00, 0xC9, 0xB4, 0x9B, 0x00, 0x00, 0x00, 0x40, 0x01, 0x40, 0x01, 0xD3, 0x16, 0x00, 0x00, 0xEC, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x4F, 0xC2, 0x89, 0xBC, 0x9B, 0x00, 0x10, 0x00, 0x24, 0x00, 0x50, 0xC2, 0x90, 0x00, 0x61, 0x00, 0x00, 0x00, 0x61, 0x00, 0xDF, 0x09, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x14, 0xCE, 0x00, 0x0D, 0x00, 0x08, 0x00, 0xB2, 0x07, 0x00, 0x10, 0xFF, 0x00, 0x0B, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x06, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x34, 0x7E, 0x00, 0xD8, 0xE4, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x20, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x3D, 0x03, 0x00, 0x00, 0x5D, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x7C, 0xEE, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x90, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x80, 0x02, 0x03, 0x04, 0x07, 0x08, 0x10, 0x1F, 0x20, 0x40, 0xC0, 0xE0, 0xF0, 0xFE, 0x06, 0x0C, 0x0F, 0x18, 0x30, 0x3F, 0x60, 0x70, 0x7F, 0xB2, 0xF8, 0xFC, 0x05, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x11, 0x14, 0x1C, 0x1E, 0x21, 0x24, 0x28, 0x2F, 0x38, 0x3C, 0x78, 0x7E, 0x8F, 0x90, 0x9F, 0xA0, 0xB0, 0xBF, 0xDF, 0xEF, 0xF7, 0xF9, 0xFB, 0xFD, 0x12, 0x13, 0x15, 0x16, 0x17, 0x19, 0x1A, 0x1B, 0x1D, 0x22, 0x23, 0x25, 0x26, 0x2C, 0x31, 0x37, 0x3E, 0x41, 0x42, 0x43, 0x44, 0x47, 0x48, 0x4F, 0x50, 0x5F, 0x61, 0x6F, 0x7C, 0x81, 0x82, 0x83, 0x84, 0x86, 0x87, 0x88, 0x8C, 0x98, 0xAF, 0xB8, 0xC1, 0xC2, 0xC4, 0xC8, 0xCF, 0xD0, 0xD8, 0xE2, 0xE3, 0xE7, 0xE8, 0xF1, 0xF2, 0xF3, 0xF4, 0xF6, 0xFA, 0x27, 0x29, 0x2A, 0x2B, 0x2D, 0x2E, 0x33, 0x34, 0x35, 0x36, 0x39, 0x3B, 0x3D, 0x46, 0x4C, 0x4E, 0x58, 0x5C, 0x5E, 0x62, 0x63, 0x64, 0x66, 0x67, 0x68, 0x6A, 0x6C, 0x6E, 0x72, 0x73, 0x74, 0x76, 0x77, 0x79, 0x7B, 0x7D, 0x89, 0x8D, 0x8E, 0x91, 0x92, 0x9C, 0x9E, 0xA1, 0xA4, 0xAA, 0xB6, 0xB7, 0xBC, 0xBE, 0xC3, 0xC6, 0xC7, 0xCC, 0xD3, 0xD5, 0xD7, 0xDB, 0xDC, 0xDE, 0xE1, 0xE4, 0xE6, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xF5, 0x32, 0x3A, 0x45, 0x49, 0x4B, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x59, 0x5A, 0x5B, 0x65, 0x6B, 0x6D, 0x71, 0x75, 0x7A, 0x85, 0x8A, 0x8B, 0x93, 0x94, 0x95, 0x97, 0x99, 0x9A, 0x9B, 0x9D, 0xA3, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAB, 0xAC, 0xAE, 0xB1, 0xB3, 0xB4, 0xB9, 0xBA, 0xBB, 0xBD, 0xC5, 0xC9, 0xCB, 0xCD, 0xCE, 0xD1, 0xD4, 0xD6, 0xD9, 0xDA, 0xDD, 0xE5, 0xE9, 0x4A, 0x4D, 0x5D, 0x69, 0x96, 0xA2, 0xAD, 0xB5, 0xCA, 0xD2, 0xFB, 0x0E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x1F, 0xFB, 0x16, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x20, 0xFB, 0x1E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x20, 0xFA, 0x00, 0xA0, 0x7F, 0x80, 0x06, 0x00, 0x00, 0x01, 0x0C, 0xC8, 0x8E, 0x40, 0x00, 0x00, 0x7A, 0x01, 0x38, 0xC9, 0x8E, 0x40, 0x00, 0x20, 0x7A, 0x01, 0x14, 0xCF, 0x8E, 0x40, 0x00, 0x40, 0x7A, 0x01, 0x64, 0xCA, 0x8E, 0x40, 0x00, 0x00, 0x7B, 0xFB, 0x06, 0x00, 0x7F, 0x0A, 0x00, 0x3C, 0x1E, 0xFB, 0x10, 0x00, 0x7F, 0x0A, 0x00, 0xBC, 0x1E, 0xFB, 0x1A, 0x00, 0x7F, 0x0A, 0x00, 0x3C, 0x1F, 0xFB, 0x24, 0x00, 0x7F, 0x0A, 0x00, 0xBC, 0x1F, 0xFB, 0x2E, 0x00, 0x7F, 0x0A, 0x00, 0x3C, 0x20, 0xFB, 0x38, 0x00, 0x7F, 0x0A, 0x00, 0xBC, 0x20, 0xFB, 0x42, 0x00, 0x7F, 0x0A, 0x00, 0x3C, 0x21, 0xFB, 0x4C, 0x00, 0x7F, 0x0A, 0x00, 0xBC, 0x21, 0xFB, 0x56, 0x00, 0x7F, 0x0A, 0x00, 0x3C, 0x22, 0xFB, 0x60, 0x00, 0x7F, 0x0A, 0x00, 0xBC, 0x22, 0xFB, 0x6A, 0x00, 0x7F, 0x0A, 0x00, 0x3C, 0x23, 0xFB, 0x74, 0x00, 0x7F, 0x0A, 0x00, 0xBC, 0x23, 0x01, 0x43, 0x68, 0x7F, 0x80, 0x01, 0x20, 0x62, 0x01, 0xC3, 0x69, 0x7F, 0x40, 0x01, 0x20, 0x63, 0xFA, 0x00, 0x00, 0x7F, 0x00, 0x10, 0x00, 0x20, 0xFA, 0x00, 0x10, 0x7F, 0xC0, 0x02, 0x00, 0x30, 0xFB, 0x06, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x1E, 0xFB, 0x12, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x1E, 0xFB, 0x1E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x1F, 0xFB, 0x2A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x1F, 0xFB, 0x36, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x20, 0xFB, 0x42, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x20, 0xFB, 0x4E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x21, 0xFB, 0x5A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x21, 0xFB, 0x66, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x22, 0xFB, 0x72, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x22, 0xFB, 0x7E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x23, 0xFB, 0x8A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x23, 0xFB, 0x06, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x1F, 0xFB, 0x0E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x1F, 0xFB, 0x16, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x20, 0xFB, 0x1E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x20, 0xFA, 0x00, 0xA0, 0x7F, 0xC0, 0x04, 0x00, 0x00, 0x01, 0xC8, 0x6B, 0x7F, 0x20, 0x09, 0x00, 0x64, 0x01, 0xE8, 0x74, 0x7F, 0x00, 0x01, 0x00, 0x69, 0xFB, 0x06, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x1E, 0xFB, 0x12, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x1E, 0xFB, 0x1E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x1F, 0xFB, 0x2A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x1F, 0xFB, 0x36, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x20, 0xFB, 0x42, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x20, 0xFB, 0x4E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x21, 0xFB, 0x5A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x21, 0xFB, 0x66, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x22, 0xFB, 0x72, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x22, 0xFB, 0x7E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x23, 0xFB, 0x8A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x23, 0xFB, 0x06, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x1F, 0xFB, 0x0E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x1F, 0xFB, 0x16, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x20, 0xFB, 0x1E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x20, 0xFA, 0x00, 0xA0, 0x7F, 0x40, 0x06, 0x00, 0x00, 0x01, 0x2F, 0x76, 0x7F, 0xC0, 0x01, 0x00, 0x6A, 0x01, 0xEF, 0x77, 0x7F, 0xC0, 0x01, 0x00, 0x6B, 0xFB, 0x06, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x1E, 0xFB, 0x12, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x1E, 0xFB, 0x1E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x1F, 0xFB, 0x2A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x1F, 0xFB, 0x36, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x20, 0xFB, 0x42, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x20, 0xFB, 0x4E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x21, 0xFB, 0x5A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x21, 0xFB, 0x66, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x22, 0xFB, 0x72, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x22, 0xFB, 0x7E, 0x40, 0x7F, 0x0C, 0x00, 0x3C, 0x23, 0xFB, 0x8A, 0x40, 0x7F, 0x0C, 0x00, 0xBC, 0x23, 0xFB, 0x06, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x1F, 0xFB, 0x0E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x1F, 0xFB, 0x16, 0xA0, 0x7F, 0x08, 0x00, 0x3E, 0x20, 0xFB, 0x1E, 0xA0, 0x7F, 0x08, 0x00, 0xBE, 0x20, 0xFA, 0x00, 0xA0, 0x7F, 0x80, 0x06, 0x00, 0x00, 0x01, 0xD4, 0xC8, 0x8E, 0x40, 0x00, 0x00, 0x7A, 0x01, 0x38, 0xC9, 0x8E, 0x40, 0x00, 0x20, 0x7A, 0x01, 0xB0, 0xCE, 0x8E, 0x40, 0x00, 0x40, 0x7A, 0x01, 0xC8, 0xCA, 0x8E, 0x40, 0x00, 0x60, 0x7A, 0x01, 0x00, 0xCA, 0x8E, 0x40, 0x00, 0x80, 0x7A, 0x01, 0xBC, 0xCC, 0x8E, 0x40, 0x00, 0xA0, 0x7A, 0x01, 0xA8, 0xC7, 0x8E, 0x40, 0x00, 0xC0, 0x7A, 0x01, 0x84, 0xCD, 0x8E, 0x40, 0x00, 0xE0, 0x7A, 0x01, 0x14, 0xCF, 0x8E, 0x40, 0x00, 0x00, 0x7B, 0x01, 0x0C, 0xC8, 0x8E, 0x40, 0x00, 0x20, 0x7B, 0x01, 0x08, 0xD1, 0x8E, 0x40, 0x00, 0x40, 0x7B, 0x01, 0x58, 0xCC, 0x8E, 0x40, 0x00, 0x60, 0x7B, 0x01, 0x70, 0xC8, 0x8E, 0x40, 0x00, 0x80, 0x7B, 0x01, 0x64, 0xCA, 0x8E, 0x40, 0x00, 0xA0, 0x7B, 0x01, 0xF4, 0xCB, 0x8E, 0x40, 0x00, 0xC0, 0x7B, 0x01, 0x4C, 0xCE, 0x8E, 0x40, 0x00, 0xE0, 0x7B, 0x01, 0x20, 0xCD, 0x8E, 0x40, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFE, 0xFE, 0xFE, 0xFE, 0x06, 0x06, 0x0C, 0x0C, 0x0F, 0x0F, 0x18, 0x18, 0x30, 0x30, 0x3F, 0x3F, 0x60, 0x60, 0x70, 0x70, 0x7F, 0x7F, 0xB2, 0xB2, 0xF8, 0xF8, 0xFC, 0xFC, 0x05, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x11, 0x14, 0x1C, 0x1E, 0x21, 0x24, 0x28, 0x2F, 0x38, 0x3C, 0x78, 0x7E, 0x8F, 0x90, 0x9F, 0xA0, 0xB0, 0xBF, 0xDF, 0xEF, 0xF7, 0xF9, 0xFB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x12, 0x12, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x0C, 0x00, 0x1E, 0x00, 0x39, 0x00, 0x45, 0x00, 0x3D, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x08, 0x00, 0x14, 0x00, 0x39, 0x00, 0x8F, 0x00, 0x59, 0x01, 0x26, 0x03, 0x05, 0x07, 0x00, 0x0F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x50, 0x00, 0x60, 0x00, 0x94, 0x00, 0xAC, 0x00, 0xCA, 0x80, 0xE6, 0xC0, 0xF7, 0x60, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDD, 0xBF, 0x8F, 0x00, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x7C, 0xEE, 0x9A, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x99, 0x9C, 0x19, 0x80, 0x80, 0x4E, 0x85, 0x00, 0x00, 0xBD, 0xF6, 0xAD, 0x45, 0x41, 0x43, 0x44, 0x53, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x24, 0x00, 0x21, 0x20, 0x23, 0x3C, 0x00, 0x31, 0x25, 0x03, 0x00, 0x00, 0x60, 0x00, 0x00, 0xA0, 0x01, 0x0F, 0x00, 0x30, 0x24, 0x10, 0x22, 0x00, 0x00, 0x02, 0x00, 0xA4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x24, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x25, 0x41, 0x00, 0x50, 0x00, 0x00, 0x69, 0x00, 0x68, 0x00, 0x00, 0x0E, 0x0E, 0x00, 0x00, 0x4F, 0xC2, 0xA5, 0xC3, 0xB7, 0xC4, 0x3C, 0xC5, 0xD5, 0xC5, 0x49, 0xC6, 0x17, 0xCA, 0x39, 0xCE, 0x4F, 0xD0, 0xC3, 0xD3, 0x29, 0xDC, 0xAC, 0xDC, 0x65, 0xDE, 0x15, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xC2, 0x92, 0xC3, 0x98, 0xC4, 0x28, 0xC5, 0xC2, 0xC5, 0x26, 0xC6, 0xF4, 0xC9, 0x16, 0xCE, 0x40, 0xD0, 0xB6, 0xD3, 0x16, 0xDC, 0x94, 0xDC, 0x4E, 0xDE, 0x06, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x45, 0x00, 0x2D, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xBC, 0x59, 0xBC, 0xF9, 0xB5, 0x09, 0xB8, 0x59, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0xB5, 0x00, 0x00, 0x39, 0xBB, 0xF9, 0xBB, 0x29, 0xBC, 0xC9, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x50, 0x5C, 0x36, 0x40, 0x43, 0x01, 0x01, 0x01, 0x7F, 0x01, 0x45, 0x7F, 0x31, 0x61, 0x00, 0x00, 0x00, 0x4F, 0x5C, 0x42, 0x61, 0x59, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x4C, 0x40, 0x61, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        for (int i = 0; i < _countof(dataAt_7FA671_Write); ++i)
        {
            Data.push_back(dataAt_7FA671_Write[i]);
        }
    }

    unsigned char& Key_Byte_6C()
    {
        return Data[0x6C];
    }

    void ShiftLeft_Key_6C()
    {
        Data[0x6C] *= 2;
    }

    unsigned short GetShort_6C()
    {
        return GetShort(0x6C);
    }

    void SetShort_6C(unsigned short val)
    {
        SetShort(0x6C, val);
    }

    void SetShort(int addr, unsigned short val)
    {
        unsigned char ch0 = val & 0xFF;
        unsigned char ch1 = val >> 8;
        Data[addr] = ch0;
        Data[addr+1] = ch1;
    }

    unsigned char& LastWrittenValue_08()
    {
        return Data[0x08];
    }

    unsigned char& ArrayIndex_6D()
    {
        return Data[0x6D];
    }

    unsigned short GetByte(int addr)
    {
        unsigned char ch0 = Data[addr];
        return ch0;
    }

    unsigned short GetShort(int addr)
    {
        unsigned char ch0 = Data[addr];
        unsigned char ch1 = Data[addr+1];

        unsigned short r = 0;
        r |= (ch1 << 8);
        r |= ch0;
        return r;
    }

    int GetLongPointer_0C()
    {
        unsigned char ch0 = Data[0xC];
        unsigned char ch1 = Data[0xD];

        int addr = 0x810000;
        addr |= (ch1 << 8);
        addr |= ch0;
        return addr;
    }

    void IncrementPointer_0C()
    {
        unsigned char& ch0 = Data[0xC];
        ch0++;
        if (ch0 != 0)
            return;

        unsigned char& ch1 = Data[0xD];
        assert(ch1 < 0xFF);
        ch1++;
    }
} wram;


int jumpElements_BF0A[] = { 0, 0, 0x80BD11 };
int jumpElements_BD7A[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0x80BEF3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80BD8E };
int jumpElements_BCF9[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80BD70 };
int jumpElements_BD2D[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80BEF2, 0, 0x80BF44 };
int jumpElements_BF5D[] = { 0, 0, 0x80BD5E};
int jumpValue = 0;
int previousJumpValue = 0;


int ROMAddressToFileOffset(int romAddress)
{
    assert(romAddress >= 0x800000); // Lower ones haven't been tested

    int offsetWithinSection = romAddress % 0x8000;

    int section = (romAddress - 0x800000) >> 16;

    int offset = section * 0x8000 + offsetWithinSection;

    return offset;
}

int FileOffsetToROMAddress(int fileOffset)
{
    int section = fileOffset / 0x8000;

    int offsetWithinSection = fileOffset % 0x8000;

    int addr = 0x800000 + (section * 0x10000) + 0x8000 + offsetWithinSection;

    return addr;
}


unsigned short GetROMDataShort(int ptr)
{
    unsigned char data0 = romData[ROMAddressToFileOffset(ptr)];
    unsigned char data1 = romData[ROMAddressToFileOffset(ptr+1)];
    return (data1 << 8) | data0;
}

void SetJumpValue(int newValue)
{
    previousJumpValue = jumpValue;
    jumpValue = newValue;
}

void Impl_BD11()
{
    unsigned char arrayIndex_6D = wram.ArrayIndex_6D();

    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    wram.LastWrittenValue_08() = decompressed;

    wram.ShiftLeft_Key_6C();
    wram.ShiftLeft_Key_6C();

    unsigned short high = wram.Key_Byte_6C();
    unsigned char low = GetROMDataShort(wram.GetLongPointer_0C());
    wram.IncrementPointer_0C();

    unsigned short combinedKey = high | low;
    wram.SetShort_6C(combinedKey);

    arrayIndex_6D = wram.ArrayIndex_6D();
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BD2D[jumpElement]);
}

void Impl_BD5E()
{
    int arrayIndex_6D = wram.ArrayIndex_6D(); // Might not be safe, we're technically supposed to save this before the jump.

    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    wram.LastWrittenValue_08() = decompressed;

    wram.ShiftLeft_Key_6C();

    unsigned short high = wram.Key_Byte_6C();
    unsigned char low = GetROMDataShort(wram.GetLongPointer_0C());
    wram.IncrementPointer_0C();

    unsigned short combinedKey = high | low;
    wram.SetShort_6C(combinedKey);

    wram.ShiftLeft_Key_6C();

    arrayIndex_6D = wram.ArrayIndex_6D();
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BD7A[jumpElement]);

}

void Impl_BD70()
{
    unsigned short key_6C = wram.GetShort_6C();
    unsigned char jumpSeek = key_6C >> 8;
    int jumpElement = array_7E0600[jumpSeek];
    SetJumpValue(jumpElements_BD7A[jumpElement]);
}

void Impl_BD8E()
{
    SetJumpValue(0x80C17C);
    argument_X_C17C = 0xE;
}

void Impl_BDE1()
{
    unsigned short x = 0x0C;
    wram.Data[0x6A] = 0;
    unsigned short acc = GetROMDataShort(wram.GetLongPointer_0C());
    acc &= 0xFF;
    acc *= 2;
    acc *= 2;
    acc |= wram.GetShort(0x6B);
    wram.SetShort(0x6B, acc);
    acc = wram.GetShort_6C();

    argument_A_BFDD = acc;
    SetJumpValue(0x80BFDD);
}

void Impl_BE0D()
{
    // C153
    // BE0D jump
    unsigned short acc = argument_A_BE0D;
    wram.SetShort_6C(acc);
    unsigned short y = wram.GetShort(0x6D);
    unsigned short x = wram.GetShort(0x600 + y);
    x &= 0xFF; // This is in 8-bit index mode
    assert(x == 2);


    // Jump to ($BE17, x) meaning we look at address 80BE17+2 which contains short address BEA4
    // Jump to BEA4

    acc *= 4;
    assert(y == 0x29);
    x = wram.GetShort(0x500 + y);
    out.push_back(x);
    wram.LastWrittenValue_08() = x;

    wram.SetShort_6C(acc);
    y = wram.GetShort(0x6D);
    y &= 0xFF; 

    x = wram.GetShort(0x600 + y);
    x &= 0xFF; // This is in 8-bit index mode
    assert(x == 0x12); // other values untested

    SetJumpValue(0x80BECC);
}

void Impl_BEB5()
{
    SetJumpValue(0x80C17C);
    argument_X_C17C = 0x6;
}

void Impl_BECC()
{
    unsigned short x = 0x6;
    // xxx
}

void Impl_BEF2(int multiplier)
{
    int arrayIndex_6D = wram.ArrayIndex_6D();
    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    wram.LastWrittenValue_08() = decompressed;

    unsigned short key_6C = wram.GetShort(0x6C);
    key_6C = key_6C * multiplier; // OK to overflow
    wram.SetShort_6C(key_6C);

    arrayIndex_6D = wram.ArrayIndex_6D();
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BF0A[jumpElement]);
}

void Impl_BF44()
{
    int arrayIndex_6D = wram.ArrayIndex_6D(); // Might not be safe, we're technically supposed to save this before the jump.

    unsigned char decompressed = decompressedValueDictionary_7E0500[arrayIndex_6D];
    out.push_back(decompressed);
    wram.LastWrittenValue_08() = decompressed;

    unsigned short key_6C = wram.GetShort(0x6C);
    key_6C = key_6C * 128; // OK to overflow
    wram.SetShort_6C(key_6C);

    arrayIndex_6D = wram.ArrayIndex_6D();
    int jumpElement = array_7E0600[arrayIndex_6D];
    SetJumpValue(jumpElements_BF5D[jumpElement]);
}

void Impl_BFDD()
{
    unsigned short acc = 0xCE14; // Initial value
    unsigned short x = 0xC;     // Initial value

    unsigned short val0750 = wram.GetShort(0x750);
    if (val0750 == 0xE680)
    {
        // BF8F
        acc /= 128;
        unsigned short val0730 = wram.GetShort(0x730);
        acc -= val0730;
        unsigned short y = acc;
        acc = wram.GetByte(0x100 + y);
        unsigned char val73 = wram.GetByte(0x73);
        if (val73 == 0)
        {
            // BFC2
            // untested
            assert(false);

        }
        else
        {
            // BFA6
            // Jumped right to C0E8

            // WriteImpl
            unsigned char b = acc & 0xFF;
            out.push_back(b);
            wram.LastWrittenValue_08() = b; 
            wram.Data[0x0C]++;
            acc = wram.GetShort(0x6B);
            assert(x == 0xC);

            SetJumpValue(0x80C10E);
            argument_A_C10E = acc;
            argument_Y_C10E = 1;
        }
    }
    else
    {
        // Fall thru to BFE2
        assert(false); // untested
    }
}

struct Result_C2DC
{
    unsigned short Result0_A;
    unsigned short Result1_X;
    unsigned short Result2_Y;
};

Result_C2DC Fn_C2DC(unsigned short param1_X)
{
    unsigned short param0_A = wram.GetShort_6C();
    unsigned short param2_Y = wram.GetShort(0x74); // Dunno what this is

    do
    {
        param0_A *= 2;
        param1_X -= 2;
        if (param1_X == 0)
        {
            unsigned char low = GetROMDataShort(wram.GetLongPointer_0C());
            param0_A = param0_A & 0xFF00;
            param0_A = param0_A | low;
            wram.IncrementPointer_0C();
            param1_X = 16;
        }
        param2_Y--;
    } while (param2_Y > 0);

    Result_C2DC result = { param0_A, param1_X, param2_Y };
    return result;
}

struct Result_C232
{
    unsigned short Result0_A;
};

unsigned short RotateLeft(unsigned short v)
{
    bool high = v >= 0x8000;
    v = v << 1;
    if (high)
    {
        v |= 1;
    }
    return v;
}

Result_C232 Fn_C232(unsigned short param1_X)
{
    // Postconditions: Result1_08 contains the repeated value and Result0_A contains the repeat count.
    Result_C232 result{};

    unsigned short acc = wram.GetShort_6C();
    bool shift = acc > 0x7FFF;
    acc = acc * 2;
    param1_X-=2;

    if (param1_X == 0)
    {
        // goto C250
        assert(false);
    }
    else
    {
        if (!shift) // went to C277
        {
            unsigned short y = 2;
            bool shift = acc > 0x7FFF;
            acc = acc * 2;
            param1_X -= 2;
            if (param1_X == 0)
            {
                // goto C2A2
                assert(false);
            }
            y++;
            if (!shift)
            {
                // goto c279
                assert(false);
            }
            else
            {
                wram.SetShort(0x14, y);

                while (1) // C283
                {
                    acc = acc * 2;
                    wram.SetShort(0x6F, RotateLeft(wram.GetShort(0x6F)));
                    param1_X -= 2;
                    if (param1_X == 0)
                    {
                        // C2AE
                        unsigned char low = GetROMDataShort(wram.GetLongPointer_0C());
                        acc = acc & 0xFF00;
                        acc = acc | low;
                        wram.IncrementPointer_0C();
                        param1_X = 0x10;
                    }
                    y--; // C28A
                    if (y != 0)
                    {
                        // Continue in loop
                    }
                    else
                    {
                        // C28D
                        wram.SetShort_6C(acc);
                        y = param1_X;
                        acc = wram.GetShort(0x14);
                        acc = acc & 0xFF;
                        acc *= 2;
                        param1_X = acc;

                        int loadAddress = 0x80C2B6 + acc;
                        acc = GetROMDataShort(loadAddress);

                        param1_X = y;
                        acc += wram.GetShort(0x6F);
                        wram.SetShort(0x6F, acc);

                        result.Result0_A = acc;
                        return result;
                    }
                }
            }


        }
        else
        {
            // fell thru to C23D
            assert(false);            
        }
    }

    return result;
}

void Impl_C10E()
{
    // takes an acc parameter
    unsigned short acc = argument_A_C10E;
    acc *= 2;
    argument_Y_C10E--;
    if (argument_Y_C10E == 0)
    {
        SetJumpValue(0x80BE0D);
        argument_A_BE0D = acc;
    }
    else
    {
        assert(false); // untested
    }
}

void Impl_C17C()
{
    unsigned char repeatingValue = 0;
    int repeatCount = 0;

    Result_C2DC resultC2DC = Fn_C2DC(argument_X_C17C);
    wram.SetShort_6C(resultC2DC.Result0_A);

    Result_C232 resultC232 = Fn_C232(resultC2DC.Result1_X);

    repeatingValue = wram.LastWrittenValue_08();
    repeatCount = resultC232.Result0_A;

    if (repeatCount == 0)
    {
        SetJumpValue(0x80C195);
        return;
    }

    for (int i = 0; i < repeatCount; ++i)
    {
        out.push_back(repeatingValue);
    }

    SetJumpValue(jumpElements_BCF9[argument_X_C17C]);
}

int main()
{    
    FILE* file{};
    fopen_s(&file, "E:\\Emulation\\SNES\\Images\\Test\\nhl94.sfc", "rb");
    fseek(file, 0, SEEK_END);
    long length = ftell(file);

    romData.resize(length);
    fseek(file, 0, SEEK_SET);
    fread(romData.data(), 1, length, file);
    fclose(file);

    SetJumpValue(0x80BDE1);
    argument_X_C17C = 0XE;

    for (int i = 0; i < 32; ++i)
    {
        switch (jumpValue)
        {
            case 0x80BD11: Impl_BD11(); break;
            case 0x80BD5E: Impl_BD5E(); break;
            case 0x80BD70: Impl_BD70(); break;
            case 0x80BD8E: Impl_BD8E(); break;
            case 0x80BDE1: Impl_BDE1(); break;
            case 0x80BE0D: Impl_BE0D(); break;
            case 0x80BEB5: Impl_BEB5(); break;
            case 0x80BECC: Impl_BECC(); break;
            case 0x80BEF2: Impl_BEF2(64); break;
            case 0x80BEF3: Impl_BEF2(32); break;
            case 0x80BF44: Impl_BF44(); break;
            case 0x80BFDD: Impl_BFDD(); break;
            case 0x80C10E: Impl_C10E(); break;
            case 0x80C17C: Impl_C17C(); break;
            default: assert(false);
        }
    }

    unsigned char expected[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x07, 0x03, 0x0F, 0x07 };
}